
S_Curve_control_stepper_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006824  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080069b0  080069b0  000169b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a18  08006a18  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006a18  08006a18  00016a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a20  08006a20  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000304  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000394  20000394  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011bbc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000237d  00000000  00000000  00031c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  00034000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  00034d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000211be  00000000  00000000  00035958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010140  00000000  00000000  00056b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cacfd  00000000  00000000  00066c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00131953  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a40  00000000  00000000  001319a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006994 	.word	0x08006994

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006994 	.word	0x08006994

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b96e 	b.w	8000e34 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	468c      	mov	ip, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f040 8083 	bne.w	8000c86 <__udivmoddi4+0x116>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4617      	mov	r7, r2
 8000b84:	d947      	bls.n	8000c16 <__udivmoddi4+0xa6>
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	b142      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8c:	f1c2 0020 	rsb	r0, r2, #32
 8000b90:	fa24 f000 	lsr.w	r0, r4, r0
 8000b94:	4091      	lsls	r1, r2
 8000b96:	4097      	lsls	r7, r2
 8000b98:	ea40 0c01 	orr.w	ip, r0, r1
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbbc f6f8 	udiv	r6, ip, r8
 8000ba8:	fa1f fe87 	uxth.w	lr, r7
 8000bac:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc2:	f080 8119 	bcs.w	8000df8 <__udivmoddi4+0x288>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8116 	bls.w	8000df8 <__udivmoddi4+0x288>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8105 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f240 8102 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	443c      	add	r4, r7
 8000bfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c00:	eba4 040e 	sub.w	r4, r4, lr
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xaa>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d150      	bne.n	8000cc4 <__udivmoddi4+0x154>
 8000c22:	1bcb      	subs	r3, r1, r7
 8000c24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c28:	fa1f f887 	uxth.w	r8, r7
 8000c2c:	2601      	movs	r6, #1
 8000c2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c32:	0c21      	lsrs	r1, r4, #16
 8000c34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c40:	428b      	cmp	r3, r1
 8000c42:	d907      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000c44:	1879      	adds	r1, r7, r1
 8000c46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0xe2>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	f200 80e9 	bhi.w	8000e24 <__udivmoddi4+0x2b4>
 8000c52:	4684      	mov	ip, r0
 8000c54:	1ac9      	subs	r1, r1, r3
 8000c56:	b2a3      	uxth	r3, r4
 8000c58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c64:	fb08 f800 	mul.w	r8, r8, r0
 8000c68:	45a0      	cmp	r8, r4
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x10c>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x10a>
 8000c74:	45a0      	cmp	r8, r4
 8000c76:	f200 80d9 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	eba4 0408 	sub.w	r4, r4, r8
 8000c80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c84:	e7bf      	b.n	8000c06 <__udivmoddi4+0x96>
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0x12e>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80b1 	beq.w	8000df2 <__udivmoddi4+0x282>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x1cc>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0x140>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80b8 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	468c      	mov	ip, r1
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0a8      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000cbe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc2:	e7a5      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000cc4:	f1c2 0320 	rsb	r3, r2, #32
 8000cc8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ccc:	4097      	lsls	r7, r2
 8000cce:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd6:	40d9      	lsrs	r1, r3
 8000cd8:	4330      	orrs	r0, r6
 8000cda:	0c03      	lsrs	r3, r0, #16
 8000cdc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f108 	mul.w	r1, r6, r8
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x19c>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cfe:	f080 808d 	bcs.w	8000e1c <__udivmoddi4+0x2ac>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 808a 	bls.w	8000e1c <__udivmoddi4+0x2ac>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	443b      	add	r3, r7
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b281      	uxth	r1, r0
 8000d10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb00 f308 	mul.w	r3, r0, r8
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x1c4>
 8000d24:	1879      	adds	r1, r7, r1
 8000d26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2a:	d273      	bcs.n	8000e14 <__udivmoddi4+0x2a4>
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d971      	bls.n	8000e14 <__udivmoddi4+0x2a4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4439      	add	r1, r7
 8000d34:	1acb      	subs	r3, r1, r3
 8000d36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3a:	e778      	b.n	8000c2e <__udivmoddi4+0xbe>
 8000d3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d40:	fa03 f406 	lsl.w	r4, r3, r6
 8000d44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d48:	431c      	orrs	r4, r3
 8000d4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5a:	431f      	orrs	r7, r3
 8000d5c:	0c3b      	lsrs	r3, r7, #16
 8000d5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d62:	fa1f f884 	uxth.w	r8, r4
 8000d66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d72:	458a      	cmp	sl, r1
 8000d74:	fa02 f206 	lsl.w	r2, r2, r6
 8000d78:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x220>
 8000d7e:	1861      	adds	r1, r4, r1
 8000d80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d84:	d248      	bcs.n	8000e18 <__udivmoddi4+0x2a8>
 8000d86:	458a      	cmp	sl, r1
 8000d88:	d946      	bls.n	8000e18 <__udivmoddi4+0x2a8>
 8000d8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8e:	4421      	add	r1, r4
 8000d90:	eba1 010a 	sub.w	r1, r1, sl
 8000d94:	b2bf      	uxth	r7, r7
 8000d96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da2:	fb00 f808 	mul.w	r8, r0, r8
 8000da6:	45b8      	cmp	r8, r7
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x24a>
 8000daa:	19e7      	adds	r7, r4, r7
 8000dac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db0:	d22e      	bcs.n	8000e10 <__udivmoddi4+0x2a0>
 8000db2:	45b8      	cmp	r8, r7
 8000db4:	d92c      	bls.n	8000e10 <__udivmoddi4+0x2a0>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4427      	add	r7, r4
 8000dba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dbe:	eba7 0708 	sub.w	r7, r7, r8
 8000dc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000dc6:	454f      	cmp	r7, r9
 8000dc8:	46c6      	mov	lr, r8
 8000dca:	4649      	mov	r1, r9
 8000dcc:	d31a      	bcc.n	8000e04 <__udivmoddi4+0x294>
 8000dce:	d017      	beq.n	8000e00 <__udivmoddi4+0x290>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x27a>
 8000dd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000dd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000dda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dde:	40f2      	lsrs	r2, r6
 8000de0:	ea4c 0202 	orr.w	r2, ip, r2
 8000de4:	40f7      	lsrs	r7, r6
 8000de6:	e9c5 2700 	strd	r2, r7, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	462e      	mov	r6, r5
 8000df4:	4628      	mov	r0, r5
 8000df6:	e70b      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	e6e9      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	e6fd      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e00:	4543      	cmp	r3, r8
 8000e02:	d2e5      	bcs.n	8000dd0 <__udivmoddi4+0x260>
 8000e04:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e08:	eb69 0104 	sbc.w	r1, r9, r4
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	e7df      	b.n	8000dd0 <__udivmoddi4+0x260>
 8000e10:	4608      	mov	r0, r1
 8000e12:	e7d2      	b.n	8000dba <__udivmoddi4+0x24a>
 8000e14:	4660      	mov	r0, ip
 8000e16:	e78d      	b.n	8000d34 <__udivmoddi4+0x1c4>
 8000e18:	4681      	mov	r9, r0
 8000e1a:	e7b9      	b.n	8000d90 <__udivmoddi4+0x220>
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	e775      	b.n	8000d0c <__udivmoddi4+0x19c>
 8000e20:	4630      	mov	r0, r6
 8000e22:	e74a      	b.n	8000cba <__udivmoddi4+0x14a>
 8000e24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e28:	4439      	add	r1, r7
 8000e2a:	e713      	b.n	8000c54 <__udivmoddi4+0xe4>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	443c      	add	r4, r7
 8000e30:	e724      	b.n	8000c7c <__udivmoddi4+0x10c>
 8000e32:	bf00      	nop

08000e34 <__aeabi_idiv0>:
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_DMA_Init+0x4c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <MX_DMA_Init+0x4c>)
 8000e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <MX_DMA_Init+0x4c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	200d      	movs	r0, #13
 8000e60:	f000 fec3 	bl	8001bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e64:	200d      	movs	r0, #13
 8000e66:	f000 fedc 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	200f      	movs	r0, #15
 8000e70:	f000 febb 	bl	8001bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e74:	200f      	movs	r0, #15
 8000e76:	f000 fed4 	bl	8001c22 <HAL_NVIC_EnableIRQ>

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800

08000e88 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <MX_GPIO_Init+0xc4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a29      	ldr	r2, [pc, #164]	; (8000f4c <MX_GPIO_Init+0xc4>)
 8000ea8:	f043 0310 	orr.w	r3, r3, #16
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <MX_GPIO_Init+0xc4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0310 	and.w	r3, r3, #16
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <MX_GPIO_Init+0xc4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <MX_GPIO_Init+0xc4>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <MX_GPIO_Init+0xc4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_GPIO_Init+0xc4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <MX_GPIO_Init+0xc4>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <MX_GPIO_Init+0xc4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MOTOR_Y_RST_Pin|MOTOR_Y_DIR_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	4816      	ldr	r0, [pc, #88]	; (8000f50 <MX_GPIO_Init+0xc8>)
 8000ef8:	f001 fbc6 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_X_DIR_Pin|MOTOR_X_RST_Pin|MOTOR_Z_DIR_Pin|MOTOR_Z_RST_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f242 2111 	movw	r1, #8721	; 0x2211
 8000f02:	4814      	ldr	r0, [pc, #80]	; (8000f54 <MX_GPIO_Init+0xcc>)
 8000f04:	f001 fbc0 	bl	8002688 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = MOTOR_Y_RST_Pin|MOTOR_Y_DIR_Pin;
 8000f08:	230a      	movs	r3, #10
 8000f0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_GPIO_Init+0xc8>)
 8000f20:	f001 fa16 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR_X_DIR_Pin|MOTOR_X_RST_Pin|MOTOR_Z_DIR_Pin|MOTOR_Z_RST_Pin;
 8000f24:	f242 2311 	movw	r3, #8721	; 0x2211
 8000f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_GPIO_Init+0xcc>)
 8000f3e:	f001 fa07 	bl	8002350 <HAL_GPIO_Init>

}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40020c00 	.word	0x40020c00

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fcf8 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f81c 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f7ff ff90 	bl	8000e88 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000f68:	f000 f980 	bl	800126c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f6c:	f000 f9f4 	bl	8001358 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f70:	f000 fa68 	bl	8001444 <MX_TIM5_Init>
  MX_DMA_Init();
 8000f74:	f7ff ff60 	bl	8000e38 <MX_DMA_Init>
  MX_UART4_Init();
 8000f78:	f000 fbe2 	bl	8001740 <MX_UART4_Init>
  MX_TIM2_Init();
 8000f7c:	f000 f928 	bl	80011d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  stepper_motor_init(0);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f003 fe87 	bl	8004c94 <stepper_motor_init>
  stepper_motor_set_param(0, 400);
 8000f86:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f003 fec8 	bl	8004d20 <stepper_motor_set_param>
  /* USER CODE END 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f90:	4801      	ldr	r0, [pc, #4]	; (8000f98 <main+0x40>)
 8000f92:	f002 f82b 	bl	8002fec <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <main+0x3e>
 8000f98:	20000188 	.word	0x20000188

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 fd0c 	bl	80059c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	4b28      	ldr	r3, [pc, #160]	; (8001068 <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <SystemClock_Config+0xcc>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b25      	ldr	r3, [pc, #148]	; (8001068 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a21      	ldr	r2, [pc, #132]	; (800106c <SystemClock_Config+0xd0>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800100c:	2308      	movs	r3, #8
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001010:	2332      	movs	r3, #50	; 0x32
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101c:	f107 0320 	add.w	r3, r7, #32
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fb4b 	bl	80026bc <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800102c:	f000 f820 	bl	8001070 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2101      	movs	r1, #1
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fdac 	bl	8002bac <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800105a:	f000 f809 	bl	8001070 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	; 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001078:	e7fe      	b.n	8001078 <Error_Handler+0x8>
	...

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <HAL_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <HAL_MspInit+0x4c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x4c>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <NMI_Handler+0x4>

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 fc6c 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <DMA1_Stream2_IRQHandler+0x10>)
 8001126:	f000 fed7 	bl	8001ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001d0 	.word	0x200001d0

08001134 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <DMA1_Stream4_IRQHandler+0x10>)
 800113a:	f000 fecd 	bl	8001ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000274 	.word	0x20000274

08001148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM2_IRQHandler+0x10>)
 800114e:	f002 f8df 	bl	8003310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000188 	.word	0x20000188

0800115c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM3_IRQHandler+0x10>)
 8001162:	f002 f8d5 	bl	8003310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000140 	.word	0x20000140

08001170 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM4_IRQHandler+0x10>)
 8001176:	f002 f8cb 	bl	8003310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000b0 	.word	0x200000b0

08001184 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <TIM5_IRQHandler+0x10>)
 800118a:	f002 f8c1 	bl	8003310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000f8 	.word	0x200000f8

08001198 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <UART4_IRQHandler+0x10>)
 800119e:	f002 ff5f 	bl	8004060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000230 	.word	0x20000230

080011ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_TIM2_Init+0x98>)
 80011ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 500-1;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_TIM2_Init+0x98>)
 80011f6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80011fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM2_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_TIM2_Init+0x98>)
 8001204:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001208:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_TIM2_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_TIM2_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <MX_TIM2_Init+0x98>)
 8001218:	f001 fe98 	bl	8002f4c <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001222:	f7ff ff25 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_TIM2_Init+0x98>)
 8001234:	f002 fa36 	bl	80036a4 <HAL_TIM_ConfigClockSource>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800123e:	f7ff ff17 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_TIM2_Init+0x98>)
 8001250:	f002 fe28 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800125a:	f7ff ff09 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000188 	.word	0x20000188

0800126c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0320 	add.w	r3, r7, #32
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]
 800129a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800129c:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <MX_TIM3_Init+0xe4>)
 800129e:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <MX_TIM3_Init+0xe8>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <MX_TIM3_Init+0xe4>)
 80012a4:	2231      	movs	r2, #49	; 0x31
 80012a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <MX_TIM3_Init+0xe4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <MX_TIM3_Init+0xe4>)
 80012b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b26      	ldr	r3, [pc, #152]	; (8001350 <MX_TIM3_Init+0xe4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b24      	ldr	r3, [pc, #144]	; (8001350 <MX_TIM3_Init+0xe4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012c2:	4823      	ldr	r0, [pc, #140]	; (8001350 <MX_TIM3_Init+0xe4>)
 80012c4:	f001 fe42 	bl	8002f4c <HAL_TIM_Base_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80012ce:	f7ff fecf 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012dc:	4619      	mov	r1, r3
 80012de:	481c      	ldr	r0, [pc, #112]	; (8001350 <MX_TIM3_Init+0xe4>)
 80012e0:	f002 f9e0 	bl	80036a4 <HAL_TIM_ConfigClockSource>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80012ea:	f7ff fec1 	bl	8001070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012ee:	4818      	ldr	r0, [pc, #96]	; (8001350 <MX_TIM3_Init+0xe4>)
 80012f0:	f001 feec 	bl	80030cc <HAL_TIM_PWM_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80012fa:	f7ff feb9 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	4619      	mov	r1, r3
 800130c:	4810      	ldr	r0, [pc, #64]	; (8001350 <MX_TIM3_Init+0xe4>)
 800130e:	f002 fdc9 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001318:	f7ff feaa 	bl	8001070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131c:	2360      	movs	r3, #96	; 0x60
 800131e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <MX_TIM3_Init+0xe4>)
 8001334:	f002 f8f4 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800133e:	f7ff fe97 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <MX_TIM3_Init+0xe4>)
 8001344:	f000 f974 	bl	8001630 <HAL_TIM_MspPostInit>

}
 8001348:	bf00      	nop
 800134a:	3738      	adds	r7, #56	; 0x38
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000140 	.word	0x20000140
 8001354:	40000400 	.word	0x40000400

08001358 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001388:	4b2c      	ldr	r3, [pc, #176]	; (800143c <MX_TIM4_Init+0xe4>)
 800138a:	4a2d      	ldr	r2, [pc, #180]	; (8001440 <MX_TIM4_Init+0xe8>)
 800138c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5-1;
 800138e:	4b2b      	ldr	r3, [pc, #172]	; (800143c <MX_TIM4_Init+0xe4>)
 8001390:	2204      	movs	r2, #4
 8001392:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b29      	ldr	r3, [pc, #164]	; (800143c <MX_TIM4_Init+0xe4>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <MX_TIM4_Init+0xe4>)
 800139c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <MX_TIM4_Init+0xe4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_TIM4_Init+0xe4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013ae:	4823      	ldr	r0, [pc, #140]	; (800143c <MX_TIM4_Init+0xe4>)
 80013b0:	f001 fdcc 	bl	8002f4c <HAL_TIM_Base_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80013ba:	f7ff fe59 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c8:	4619      	mov	r1, r3
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <MX_TIM4_Init+0xe4>)
 80013cc:	f002 f96a 	bl	80036a4 <HAL_TIM_ConfigClockSource>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80013d6:	f7ff fe4b 	bl	8001070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <MX_TIM4_Init+0xe4>)
 80013dc:	f001 fe76 	bl	80030cc <HAL_TIM_PWM_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013e6:	f7ff fe43 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013f2:	f107 0320 	add.w	r3, r7, #32
 80013f6:	4619      	mov	r1, r3
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <MX_TIM4_Init+0xe4>)
 80013fa:	f002 fd53 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001404:	f7ff fe34 	bl	8001070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001408:	2360      	movs	r3, #96	; 0x60
 800140a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	4619      	mov	r1, r3
 800141e:	4807      	ldr	r0, [pc, #28]	; (800143c <MX_TIM4_Init+0xe4>)
 8001420:	f002 f87e 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800142a:	f7ff fe21 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <MX_TIM4_Init+0xe4>)
 8001430:	f000 f8fe 	bl	8001630 <HAL_TIM_MspPostInit>

}
 8001434:	bf00      	nop
 8001436:	3738      	adds	r7, #56	; 0x38
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000b0 	.word	0x200000b0
 8001440:	40000800 	.word	0x40000800

08001444 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08e      	sub	sp, #56	; 0x38
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001474:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <MX_TIM5_Init+0xe4>)
 8001476:	4a2d      	ldr	r2, [pc, #180]	; (800152c <MX_TIM5_Init+0xe8>)
 8001478:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 5-1;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_TIM5_Init+0xe4>)
 800147c:	2204      	movs	r2, #4
 800147e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_TIM5_Init+0xe4>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_TIM5_Init+0xe4>)
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_TIM5_Init+0xe4>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <MX_TIM5_Init+0xe4>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800149a:	4823      	ldr	r0, [pc, #140]	; (8001528 <MX_TIM5_Init+0xe4>)
 800149c:	f001 fd56 	bl	8002f4c <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80014a6:	f7ff fde3 	bl	8001070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b4:	4619      	mov	r1, r3
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <MX_TIM5_Init+0xe4>)
 80014b8:	f002 f8f4 	bl	80036a4 <HAL_TIM_ConfigClockSource>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80014c2:	f7ff fdd5 	bl	8001070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM5_Init+0xe4>)
 80014c8:	f001 fe00 	bl	80030cc <HAL_TIM_PWM_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80014d2:	f7ff fdcd 	bl	8001070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4619      	mov	r1, r3
 80014e4:	4810      	ldr	r0, [pc, #64]	; (8001528 <MX_TIM5_Init+0xe4>)
 80014e6:	f002 fcdd 	bl	8003ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80014f0:	f7ff fdbe 	bl	8001070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f4:	2360      	movs	r3, #96	; 0x60
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2208      	movs	r2, #8
 8001508:	4619      	mov	r1, r3
 800150a:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM5_Init+0xe4>)
 800150c:	f002 f808 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001516:	f7ff fdab 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM5_Init+0xe4>)
 800151c:	f000 f888 	bl	8001630 <HAL_TIM_MspPostInit>

}
 8001520:	bf00      	nop
 8001522:	3738      	adds	r7, #56	; 0x38
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200000f8 	.word	0x200000f8
 800152c:	40000c00 	.word	0x40000c00

08001530 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001540:	d116      	bne.n	8001570 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4b36      	ldr	r3, [pc, #216]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a35      	ldr	r2, [pc, #212]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	201c      	movs	r0, #28
 8001564:	f000 fb41 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001568:	201c      	movs	r0, #28
 800156a:	f000 fb5a 	bl	8001c22 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800156e:	e052      	b.n	8001616 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2b      	ldr	r2, [pc, #172]	; (8001624 <HAL_TIM_Base_MspInit+0xf4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d116      	bne.n	80015a8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a27      	ldr	r2, [pc, #156]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	201d      	movs	r0, #29
 800159c:	f000 fb25 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015a0:	201d      	movs	r0, #29
 80015a2:	f000 fb3e 	bl	8001c22 <HAL_NVIC_EnableIRQ>
}
 80015a6:	e036      	b.n	8001616 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a1e      	ldr	r2, [pc, #120]	; (8001628 <HAL_TIM_Base_MspInit+0xf8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d116      	bne.n	80015e0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	201e      	movs	r0, #30
 80015d4:	f000 fb09 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015d8:	201e      	movs	r0, #30
 80015da:	f000 fb22 	bl	8001c22 <HAL_NVIC_EnableIRQ>
}
 80015de:	e01a      	b.n	8001616 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM5)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a11      	ldr	r2, [pc, #68]	; (800162c <HAL_TIM_Base_MspInit+0xfc>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d115      	bne.n	8001616 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_TIM_Base_MspInit+0xf0>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2032      	movs	r0, #50	; 0x32
 800160c:	f000 faed 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001610:	2032      	movs	r0, #50	; 0x32
 8001612:	f000 fb06 	bl	8001c22 <HAL_NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40000400 	.word	0x40000400
 8001628:	40000800 	.word	0x40000800
 800162c:	40000c00 	.word	0x40000c00

08001630 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a36      	ldr	r2, [pc, #216]	; (8001728 <HAL_TIM_MspPostInit+0xf8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d11e      	bne.n	8001690 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b35      	ldr	r3, [pc, #212]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a34      	ldr	r2, [pc, #208]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_Z_STEP_Pin;
 800166e:	2340      	movs	r3, #64	; 0x40
 8001670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800167e:	2302      	movs	r3, #2
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_Z_STEP_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4829      	ldr	r0, [pc, #164]	; (8001730 <HAL_TIM_MspPostInit+0x100>)
 800168a:	f000 fe61 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800168e:	e047      	b.n	8001720 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <HAL_TIM_MspPostInit+0x104>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d11f      	bne.n	80016da <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a22      	ldr	r2, [pc, #136]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_X_STEP_Pin;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016c8:	2302      	movs	r3, #2
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_X_STEP_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4819      	ldr	r0, [pc, #100]	; (8001738 <HAL_TIM_MspPostInit+0x108>)
 80016d4:	f000 fe3c 	bl	8002350 <HAL_GPIO_Init>
}
 80016d8:	e022      	b.n	8001720 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a17      	ldr	r2, [pc, #92]	; (800173c <HAL_TIM_MspPostInit+0x10c>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d11d      	bne.n	8001720 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_TIM_MspPostInit+0xfc>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_Y_STEP_Pin;
 8001700:	2304      	movs	r3, #4
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001710:	2302      	movs	r3, #2
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_Y_STEP_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <HAL_TIM_MspPostInit+0x100>)
 800171c:	f000 fe18 	bl	8002350 <HAL_GPIO_Init>
}
 8001720:	bf00      	nop
 8001722:	3728      	adds	r7, #40	; 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40000400 	.word	0x40000400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000
 8001734:	40000800 	.word	0x40000800
 8001738:	40020c00 	.word	0x40020c00
 800173c:	40000c00 	.word	0x40000c00

08001740 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart4_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_UART4_Init+0x4c>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <MX_UART4_Init+0x50>)
 8001748:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <MX_UART4_Init+0x4c>)
 800174c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001750:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_UART4_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_UART4_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_UART4_Init+0x4c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_UART4_Init+0x4c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_UART4_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_UART4_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_UART4_Init+0x4c>)
 8001778:	f002 fc24 	bl	8003fc4 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001782:	f7ff fc75 	bl	8001070 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000230 	.word	0x20000230
 8001790:	40004c00 	.word	0x40004c00

08001794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	; 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a4b      	ldr	r2, [pc, #300]	; (80018e0 <HAL_UART_MspInit+0x14c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	f040 8090 	bne.w	80018d8 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	4b49      	ldr	r3, [pc, #292]	; (80018e4 <HAL_UART_MspInit+0x150>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a48      	ldr	r2, [pc, #288]	; (80018e4 <HAL_UART_MspInit+0x150>)
 80017c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_UART_MspInit+0x150>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_UART_MspInit+0x150>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a41      	ldr	r2, [pc, #260]	; (80018e4 <HAL_UART_MspInit+0x150>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_UART_MspInit+0x150>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017f0:	2303      	movs	r3, #3
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001800:	2308      	movs	r3, #8
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4837      	ldr	r0, [pc, #220]	; (80018e8 <HAL_UART_MspInit+0x154>)
 800180c:	f000 fda0 	bl	8002350 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001810:	4b36      	ldr	r3, [pc, #216]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001812:	4a37      	ldr	r2, [pc, #220]	; (80018f0 <HAL_UART_MspInit+0x15c>)
 8001814:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001816:	4b35      	ldr	r3, [pc, #212]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001818:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800181c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181e:	4b33      	ldr	r3, [pc, #204]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001824:	4b31      	ldr	r3, [pc, #196]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800182a:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_UART_MspInit+0x158>)
 800182c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001830:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001834:	2200      	movs	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001838:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <HAL_UART_MspInit+0x158>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_UART_MspInit+0x158>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001850:	4826      	ldr	r0, [pc, #152]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001852:	f000 fa01 	bl	8001c58 <HAL_DMA_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800185c:	f7ff fc08 	bl	8001070 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_UART_MspInit+0x158>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_UART_MspInit+0x160>)
 800186e:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_UART_MspInit+0x164>)
 8001870:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_UART_MspInit+0x160>)
 8001874:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001878:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_UART_MspInit+0x160>)
 800187c:	2240      	movs	r2, #64	; 0x40
 800187e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001880:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_UART_MspInit+0x160>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_UART_MspInit+0x160>)
 8001888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800188c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_UART_MspInit+0x160>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <HAL_UART_MspInit+0x160>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_UART_MspInit+0x160>)
 800189c:	2200      	movs	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_UART_MspInit+0x160>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a6:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <HAL_UART_MspInit+0x160>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80018ac:	4811      	ldr	r0, [pc, #68]	; (80018f4 <HAL_UART_MspInit+0x160>)
 80018ae:	f000 f9d3 	bl	8001c58 <HAL_DMA_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80018b8:	f7ff fbda 	bl	8001070 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <HAL_UART_MspInit+0x160>)
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
 80018c2:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <HAL_UART_MspInit+0x160>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2034      	movs	r0, #52	; 0x34
 80018ce:	f000 f98c 	bl	8001bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80018d2:	2034      	movs	r0, #52	; 0x34
 80018d4:	f000 f9a5 	bl	8001c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	; 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40004c00 	.word	0x40004c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	200001d0 	.word	0x200001d0
 80018f0:	40026040 	.word	0x40026040
 80018f4:	20000274 	.word	0x20000274
 80018f8:	40026070 	.word	0x40026070

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001902:	490e      	ldr	r1, [pc, #56]	; (800193c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001918:	4c0b      	ldr	r4, [pc, #44]	; (8001948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001926:	f7ff fc41 	bl	80011ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f004 f829 	bl	8005980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fb13 	bl	8000f58 <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001940:	08006a28 	.word	0x08006a28
  ldr r2, =_sbss
 8001944:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001948:	20000394 	.word	0x20000394

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f92b 	bl	8001bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	200f      	movs	r0, #15
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fb7a 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f943 	bl	8001c3e <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f90b 	bl	8001bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	200002d4 	.word	0x200002d4

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200002d4 	.word	0x200002d4

08001a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4a:	68ba      	ldr	r2, [r7, #8]
 8001a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a50:	4013      	ands	r3, r2
 8001a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a66:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <__NVIC_SetPriorityGrouping+0x44>)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60d3      	str	r3, [r2, #12]
}
 8001a6c:	bf00      	nop
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <__NVIC_GetPriorityGrouping+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 0307 	and.w	r3, r3, #7
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	db0b      	blt.n	8001ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	f003 021f 	and.w	r2, r3, #31
 8001ab0:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <__NVIC_EnableIRQ+0x38>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	2001      	movs	r0, #1
 8001aba:	fa00 f202 	lsl.w	r2, r0, r2
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba0:	d301      	bcc.n	8001ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00f      	b.n	8001bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <SysTick_Config+0x40>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bae:	210f      	movs	r1, #15
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb4:	f7ff ff8e 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SysTick_Config+0x40>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <SysTick_Config+0x40>)
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	e000e010 	.word	0xe000e010

08001bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff29 	bl	8001a34 <__NVIC_SetPriorityGrouping>
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
 8001bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bfc:	f7ff ff3e 	bl	8001a7c <__NVIC_GetPriorityGrouping>
 8001c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	6978      	ldr	r0, [r7, #20]
 8001c08:	f7ff ff8e 	bl	8001b28 <NVIC_EncodePriority>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff5d 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff31 	bl	8001a98 <__NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffa2 	bl	8001b90 <SysTick_Config>
 8001c4c:	4603      	mov	r3, r0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff feda 	bl	8001a1c <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e099      	b.n	8001da8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2202      	movs	r2, #2
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c94:	e00f      	b.n	8001cb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c96:	f7ff fec1 	bl	8001a1c <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d908      	bls.n	8001cb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2203      	movs	r2, #3
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e078      	b.n	8001da8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1e8      	bne.n	8001c96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_DMA_Init+0x158>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d107      	bne.n	8001d20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f023 0307 	bic.w	r3, r3, #7
 8001d36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d117      	bne.n	8001d7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00e      	beq.n	8001d7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fa7b 	bl	8002258 <DMA_CheckFifoParam>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d76:	2301      	movs	r3, #1
 8001d78:	e016      	b.n	8001da8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fa32 	bl	80021ec <DMA_CalcBaseAndBitshift>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	223f      	movs	r2, #63	; 0x3f
 8001d92:	409a      	lsls	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	f010803f 	.word	0xf010803f

08001db4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dc2:	f7ff fe2b 	bl	8001a1c <HAL_GetTick>
 8001dc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d008      	beq.n	8001de6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e052      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0216 	bic.w	r2, r2, #22
 8001df4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <HAL_DMA_Abort+0x62>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0208 	bic.w	r2, r2, #8
 8001e24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e36:	e013      	b.n	8001e60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e38:	f7ff fdf0 	bl	8001a1c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d90c      	bls.n	8001e60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e015      	b.n	8001e8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e4      	bne.n	8001e38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	223f      	movs	r2, #63	; 0x3f
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00c      	b.n	8001ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2205      	movs	r2, #5
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee4:	4b92      	ldr	r3, [pc, #584]	; (8002130 <HAL_DMA_IRQHandler+0x258>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a92      	ldr	r2, [pc, #584]	; (8002134 <HAL_DMA_IRQHandler+0x25c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a9b      	lsrs	r3, r3, #10
 8001ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f02:	2208      	movs	r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2208      	movs	r2, #8
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	2201      	movs	r2, #1
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	2201      	movs	r2, #1
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f043 0202 	orr.w	r2, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	2204      	movs	r2, #4
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d043      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03c      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d024      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e01f      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e016      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0208 	bic.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2220      	movs	r2, #32
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 808e 	beq.w	8002176 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8086 	beq.w	8002176 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2220      	movs	r2, #32
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b05      	cmp	r3, #5
 8002080:	d136      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0216 	bic.w	r2, r2, #22
 8002090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x1da>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0208 	bic.w	r2, r2, #8
 80020c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	223f      	movs	r2, #63	; 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d07d      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
        }
        return;
 80020ee:	e078      	b.n	80021e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01c      	beq.n	8002138 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d108      	bne.n	800211e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002110:	2b00      	cmp	r3, #0
 8002112:	d030      	beq.n	8002176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e02b      	b.n	8002176 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d027      	beq.n	8002176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e022      	b.n	8002176 <HAL_DMA_IRQHandler+0x29e>
 8002130:	20000000 	.word	0x20000000
 8002134:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10f      	bne.n	8002166 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0210 	bic.w	r2, r2, #16
 8002154:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	2b00      	cmp	r3, #0
 800217c:	d032      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d022      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2205      	movs	r2, #5
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0201 	bic.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d307      	bcc.n	80021be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f2      	bne.n	80021a2 <HAL_DMA_IRQHandler+0x2ca>
 80021bc:	e000      	b.n	80021c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021be:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e000      	b.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021e2:	bf00      	nop
    }
  }
}
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop

080021ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3b10      	subs	r3, #16
 80021fc:	4a14      	ldr	r2, [pc, #80]	; (8002250 <DMA_CalcBaseAndBitshift+0x64>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002206:	4a13      	ldr	r2, [pc, #76]	; (8002254 <DMA_CalcBaseAndBitshift+0x68>)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4413      	add	r3, r2
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b03      	cmp	r3, #3
 8002218:	d909      	bls.n	800222e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002222:	f023 0303 	bic.w	r3, r3, #3
 8002226:	1d1a      	adds	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	659a      	str	r2, [r3, #88]	; 0x58
 800222c:	e007      	b.n	800223e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002236:	f023 0303 	bic.w	r3, r3, #3
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	aaaaaaab 	.word	0xaaaaaaab
 8002254:	080069c8 	.word	0x080069c8

08002258 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11f      	bne.n	80022b2 <DMA_CheckFifoParam+0x5a>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d856      	bhi.n	8002326 <DMA_CheckFifoParam+0xce>
 8002278:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <DMA_CheckFifoParam+0x28>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	08002291 	.word	0x08002291
 8002284:	080022a3 	.word	0x080022a3
 8002288:	08002291 	.word	0x08002291
 800228c:	08002327 	.word	0x08002327
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d046      	beq.n	800232a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a0:	e043      	b.n	800232a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022aa:	d140      	bne.n	800232e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b0:	e03d      	b.n	800232e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ba:	d121      	bne.n	8002300 <DMA_CheckFifoParam+0xa8>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d837      	bhi.n	8002332 <DMA_CheckFifoParam+0xda>
 80022c2:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <DMA_CheckFifoParam+0x70>)
 80022c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c8:	080022d9 	.word	0x080022d9
 80022cc:	080022df 	.word	0x080022df
 80022d0:	080022d9 	.word	0x080022d9
 80022d4:	080022f1 	.word	0x080022f1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
      break;
 80022dc:	e030      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d025      	beq.n	8002336 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ee:	e022      	b.n	8002336 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022f8:	d11f      	bne.n	800233a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022fe:	e01c      	b.n	800233a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d903      	bls.n	800230e <DMA_CheckFifoParam+0xb6>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d003      	beq.n	8002314 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800230c:	e018      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      break;
 8002312:	e015      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00e      	beq.n	800233e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
      break;
 8002324:	e00b      	b.n	800233e <DMA_CheckFifoParam+0xe6>
      break;
 8002326:	bf00      	nop
 8002328:	e00a      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 800232a:	bf00      	nop
 800232c:	e008      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 800232e:	bf00      	nop
 8002330:	e006      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 8002332:	bf00      	nop
 8002334:	e004      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 8002336:	bf00      	nop
 8002338:	e002      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;   
 800233a:	bf00      	nop
 800233c:	e000      	b.n	8002340 <DMA_CheckFifoParam+0xe8>
      break;
 800233e:	bf00      	nop
    }
  } 
  
  return status; 
 8002340:	7bfb      	ldrb	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e16b      	b.n	8002644 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 815a 	bne.w	800263e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d005      	beq.n	80023a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d130      	bne.n	8002404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 0201 	and.w	r2, r3, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b03      	cmp	r3, #3
 800240e:	d017      	beq.n	8002440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d123      	bne.n	8002494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	08da      	lsrs	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	69b9      	ldr	r1, [r7, #24]
 8002490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80b4 	beq.w	800263e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b60      	ldr	r3, [pc, #384]	; (800265c <HAL_GPIO_Init+0x30c>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a5f      	ldr	r2, [pc, #380]	; (800265c <HAL_GPIO_Init+0x30c>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b5d      	ldr	r3, [pc, #372]	; (800265c <HAL_GPIO_Init+0x30c>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a5b      	ldr	r2, [pc, #364]	; (8002660 <HAL_GPIO_Init+0x310>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a52      	ldr	r2, [pc, #328]	; (8002664 <HAL_GPIO_Init+0x314>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d02b      	beq.n	8002576 <HAL_GPIO_Init+0x226>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a51      	ldr	r2, [pc, #324]	; (8002668 <HAL_GPIO_Init+0x318>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d025      	beq.n	8002572 <HAL_GPIO_Init+0x222>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a50      	ldr	r2, [pc, #320]	; (800266c <HAL_GPIO_Init+0x31c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01f      	beq.n	800256e <HAL_GPIO_Init+0x21e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4f      	ldr	r2, [pc, #316]	; (8002670 <HAL_GPIO_Init+0x320>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d019      	beq.n	800256a <HAL_GPIO_Init+0x21a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4e      	ldr	r2, [pc, #312]	; (8002674 <HAL_GPIO_Init+0x324>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x216>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <HAL_GPIO_Init+0x328>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x212>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4c      	ldr	r2, [pc, #304]	; (800267c <HAL_GPIO_Init+0x32c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x20e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4b      	ldr	r2, [pc, #300]	; (8002680 <HAL_GPIO_Init+0x330>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x20a>
 8002556:	2307      	movs	r3, #7
 8002558:	e00e      	b.n	8002578 <HAL_GPIO_Init+0x228>
 800255a:	2308      	movs	r3, #8
 800255c:	e00c      	b.n	8002578 <HAL_GPIO_Init+0x228>
 800255e:	2306      	movs	r3, #6
 8002560:	e00a      	b.n	8002578 <HAL_GPIO_Init+0x228>
 8002562:	2305      	movs	r3, #5
 8002564:	e008      	b.n	8002578 <HAL_GPIO_Init+0x228>
 8002566:	2304      	movs	r3, #4
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x228>
 800256a:	2303      	movs	r3, #3
 800256c:	e004      	b.n	8002578 <HAL_GPIO_Init+0x228>
 800256e:	2302      	movs	r3, #2
 8002570:	e002      	b.n	8002578 <HAL_GPIO_Init+0x228>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x228>
 8002576:	2300      	movs	r3, #0
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f002 0203 	and.w	r2, r2, #3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4093      	lsls	r3, r2
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002588:	4935      	ldr	r1, [pc, #212]	; (8002660 <HAL_GPIO_Init+0x310>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002596:	4b3b      	ldr	r3, [pc, #236]	; (8002684 <HAL_GPIO_Init+0x334>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ba:	4a32      	ldr	r2, [pc, #200]	; (8002684 <HAL_GPIO_Init+0x334>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025c0:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_GPIO_Init+0x334>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e4:	4a27      	ldr	r2, [pc, #156]	; (8002684 <HAL_GPIO_Init+0x334>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <HAL_GPIO_Init+0x334>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260e:	4a1d      	ldr	r2, [pc, #116]	; (8002684 <HAL_GPIO_Init+0x334>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_GPIO_Init+0x334>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002638:	4a12      	ldr	r2, [pc, #72]	; (8002684 <HAL_GPIO_Init+0x334>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3301      	adds	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	f67f ae90 	bls.w	800236c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40013800 	.word	0x40013800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400
 800266c:	40020800 	.word	0x40020800
 8002670:	40020c00 	.word	0x40020c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40021400 	.word	0x40021400
 800267c:	40021800 	.word	0x40021800
 8002680:	40021c00 	.word	0x40021c00
 8002684:	40013c00 	.word	0x40013c00

08002688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
 8002694:	4613      	mov	r3, r2
 8002696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002698:	787b      	ldrb	r3, [r7, #1]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a4:	e003      	b.n	80026ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	041a      	lsls	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	619a      	str	r2, [r3, #24]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b086      	sub	sp, #24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e264      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d075      	beq.n	80027c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026da:	4ba3      	ldr	r3, [pc, #652]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d00c      	beq.n	8002700 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e6:	4ba0      	ldr	r3, [pc, #640]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d112      	bne.n	8002718 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f2:	4b9d      	ldr	r3, [pc, #628]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fe:	d10b      	bne.n	8002718 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	4b99      	ldr	r3, [pc, #612]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d05b      	beq.n	80027c4 <HAL_RCC_OscConfig+0x108>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d157      	bne.n	80027c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e23f      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002720:	d106      	bne.n	8002730 <HAL_RCC_OscConfig+0x74>
 8002722:	4b91      	ldr	r3, [pc, #580]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a90      	ldr	r2, [pc, #576]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e01d      	b.n	800276c <HAL_RCC_OscConfig+0xb0>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002738:	d10c      	bne.n	8002754 <HAL_RCC_OscConfig+0x98>
 800273a:	4b8b      	ldr	r3, [pc, #556]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a8a      	ldr	r2, [pc, #552]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	4b88      	ldr	r3, [pc, #544]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a87      	ldr	r2, [pc, #540]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e00b      	b.n	800276c <HAL_RCC_OscConfig+0xb0>
 8002754:	4b84      	ldr	r3, [pc, #528]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a83      	ldr	r2, [pc, #524]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800275a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	4b81      	ldr	r3, [pc, #516]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a80      	ldr	r2, [pc, #512]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800276a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d013      	beq.n	800279c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff f952 	bl	8001a1c <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800277c:	f7ff f94e 	bl	8001a1c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b64      	cmp	r3, #100	; 0x64
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e204      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b76      	ldr	r3, [pc, #472]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0xc0>
 800279a:	e014      	b.n	80027c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7ff f93e 	bl	8001a1c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a4:	f7ff f93a 	bl	8001a1c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1f0      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b6:	4b6c      	ldr	r3, [pc, #432]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0xe8>
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d063      	beq.n	800289a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027de:	4b62      	ldr	r3, [pc, #392]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d11c      	bne.n	8002824 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ea:	4b5f      	ldr	r3, [pc, #380]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d116      	bne.n	8002824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f6:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_RCC_OscConfig+0x152>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e1c4      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280e:	4b56      	ldr	r3, [pc, #344]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4952      	ldr	r1, [pc, #328]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	4313      	orrs	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	e03a      	b.n	800289a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800282c:	4b4f      	ldr	r3, [pc, #316]	; (800296c <HAL_RCC_OscConfig+0x2b0>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7ff f8f3 	bl	8001a1c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283a:	f7ff f8ef 	bl	8001a1c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1a5      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284c:	4b46      	ldr	r3, [pc, #280]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4940      	ldr	r1, [pc, #256]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]
 800286c:	e015      	b.n	800289a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286e:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_RCC_OscConfig+0x2b0>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7ff f8d2 	bl	8001a1c <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800287c:	f7ff f8ce 	bl	8001a1c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e184      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d030      	beq.n	8002908 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d016      	beq.n	80028dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ae:	4b30      	ldr	r3, [pc, #192]	; (8002970 <HAL_RCC_OscConfig+0x2b4>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7ff f8b2 	bl	8001a1c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028bc:	f7ff f8ae 	bl	8001a1c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e164      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x200>
 80028da:	e015      	b.n	8002908 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028dc:	4b24      	ldr	r3, [pc, #144]	; (8002970 <HAL_RCC_OscConfig+0x2b4>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7ff f89b 	bl	8001a1c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ea:	f7ff f897 	bl	8001a1c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e14d      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fc:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 80028fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a0 	beq.w	8002a56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	4a0e      	ldr	r2, [pc, #56]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002934:	6413      	str	r3, [r2, #64]	; 0x40
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_OscConfig+0x2b8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d121      	bne.n	8002996 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002952:	4b08      	ldr	r3, [pc, #32]	; (8002974 <HAL_RCC_OscConfig+0x2b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a07      	ldr	r2, [pc, #28]	; (8002974 <HAL_RCC_OscConfig+0x2b8>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295e:	f7ff f85d 	bl	8001a1c <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002964:	e011      	b.n	800298a <HAL_RCC_OscConfig+0x2ce>
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	42470000 	.word	0x42470000
 8002970:	42470e80 	.word	0x42470e80
 8002974:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002978:	f7ff f850 	bl	8001a1c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e106      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298a:	4b85      	ldr	r3, [pc, #532]	; (8002ba0 <HAL_RCC_OscConfig+0x4e4>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d106      	bne.n	80029ac <HAL_RCC_OscConfig+0x2f0>
 800299e:	4b81      	ldr	r3, [pc, #516]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a80      	ldr	r2, [pc, #512]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
 80029aa:	e01c      	b.n	80029e6 <HAL_RCC_OscConfig+0x32a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x312>
 80029b4:	4b7b      	ldr	r3, [pc, #492]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a7a      	ldr	r2, [pc, #488]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	4b78      	ldr	r3, [pc, #480]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a77      	ldr	r2, [pc, #476]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
 80029cc:	e00b      	b.n	80029e6 <HAL_RCC_OscConfig+0x32a>
 80029ce:	4b75      	ldr	r3, [pc, #468]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a74      	ldr	r2, [pc, #464]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	4b72      	ldr	r3, [pc, #456]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a71      	ldr	r2, [pc, #452]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d015      	beq.n	8002a1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7ff f815 	bl	8001a1c <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7ff f811 	bl	8001a1c <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0c5      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0c:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ee      	beq.n	80029f6 <HAL_RCC_OscConfig+0x33a>
 8002a18:	e014      	b.n	8002a44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe ffff 	bl	8001a1c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fffb 	bl	8001a1c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0af      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a38:	4b5a      	ldr	r3, [pc, #360]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ee      	bne.n	8002a22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4b56      	ldr	r3, [pc, #344]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a55      	ldr	r2, [pc, #340]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 809b 	beq.w	8002b96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a60:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d05c      	beq.n	8002b26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d141      	bne.n	8002af8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a74:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <HAL_RCC_OscConfig+0x4ec>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe ffcf 	bl	8001a1c <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fe ffcb 	bl	8001a1c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e081      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a94:	4b43      	ldr	r3, [pc, #268]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f0      	bne.n	8002a82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	019b      	lsls	r3, r3, #6
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	4937      	ldr	r1, [pc, #220]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_RCC_OscConfig+0x4ec>)
 8002acc:	2201      	movs	r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe ffa4 	bl	8001a1c <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	e008      	b.n	8002aea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad8:	f7fe ffa0 	bl	8001a1c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e056      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	4b2e      	ldr	r3, [pc, #184]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f0      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x41c>
 8002af6:	e04e      	b.n	8002b96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCC_OscConfig+0x4ec>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe ff8d 	bl	8001a1c <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b06:	f7fe ff89 	bl	8001a1c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e03f      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x44a>
 8002b24:	e037      	b.n	8002b96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e032      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <HAL_RCC_OscConfig+0x4e8>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d028      	beq.n	8002b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d121      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d11a      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b62:	4013      	ands	r3, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d111      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40007000 	.word	0x40007000
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	42470060 	.word	0x42470060

08002bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0cc      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b68      	ldr	r3, [pc, #416]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d90c      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b65      	ldr	r3, [pc, #404]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0b8      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d020      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c00:	4b59      	ldr	r3, [pc, #356]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a58      	ldr	r2, [pc, #352]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c18:	4b53      	ldr	r3, [pc, #332]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a52      	ldr	r2, [pc, #328]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	494d      	ldr	r1, [pc, #308]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d044      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d107      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d119      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e07f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e06f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e067      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8a:	4b37      	ldr	r3, [pc, #220]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f023 0203 	bic.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	4934      	ldr	r1, [pc, #208]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c9c:	f7fe febe 	bl	8001a1c <HAL_GetTick>
 8002ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe feba 	bl	8001a1c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e04f      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 020c 	and.w	r2, r3, #12
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1eb      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d20c      	bcs.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e032      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4916      	ldr	r1, [pc, #88]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d009      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	490e      	ldr	r1, [pc, #56]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d32:	f000 f821 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002d36:	4602      	mov	r2, r0
 8002d38:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	490a      	ldr	r1, [pc, #40]	; (8002d6c <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	5ccb      	ldrb	r3, [r1, r3]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe fe1e 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023c00 	.word	0x40023c00
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	080069b0 	.word	0x080069b0
 8002d70:	20000000 	.word	0x20000000
 8002d74:	20000004 	.word	0x20000004

08002d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d7e:	2100      	movs	r1, #0
 8002d80:	6079      	str	r1, [r7, #4]
 8002d82:	2100      	movs	r1, #0
 8002d84:	60f9      	str	r1, [r7, #12]
 8002d86:	2100      	movs	r1, #0
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d8e:	4952      	ldr	r1, [pc, #328]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d90:	6889      	ldr	r1, [r1, #8]
 8002d92:	f001 010c 	and.w	r1, r1, #12
 8002d96:	2908      	cmp	r1, #8
 8002d98:	d00d      	beq.n	8002db6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002d9a:	2908      	cmp	r1, #8
 8002d9c:	f200 8094 	bhi.w	8002ec8 <HAL_RCC_GetSysClockFreq+0x150>
 8002da0:	2900      	cmp	r1, #0
 8002da2:	d002      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x32>
 8002da4:	2904      	cmp	r1, #4
 8002da6:	d003      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x38>
 8002da8:	e08e      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002daa:	4b4c      	ldr	r3, [pc, #304]	; (8002edc <HAL_RCC_GetSysClockFreq+0x164>)
 8002dac:	60bb      	str	r3, [r7, #8]
       break;
 8002dae:	e08e      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002db0:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002db2:	60bb      	str	r3, [r7, #8]
      break;
 8002db4:	e08b      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db6:	4948      	ldr	r1, [pc, #288]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002db8:	6849      	ldr	r1, [r1, #4]
 8002dba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002dbe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dc0:	4945      	ldr	r1, [pc, #276]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dc2:	6849      	ldr	r1, [r1, #4]
 8002dc4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002dc8:	2900      	cmp	r1, #0
 8002dca:	d024      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dcc:	4942      	ldr	r1, [pc, #264]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002dce:	6849      	ldr	r1, [r1, #4]
 8002dd0:	0989      	lsrs	r1, r1, #6
 8002dd2:	4608      	mov	r0, r1
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ddc:	f04f 0500 	mov.w	r5, #0
 8002de0:	ea00 0204 	and.w	r2, r0, r4
 8002de4:	ea01 0305 	and.w	r3, r1, r5
 8002de8:	493d      	ldr	r1, [pc, #244]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002dea:	fb01 f003 	mul.w	r0, r1, r3
 8002dee:	2100      	movs	r1, #0
 8002df0:	fb01 f102 	mul.w	r1, r1, r2
 8002df4:	1844      	adds	r4, r0, r1
 8002df6:	493a      	ldr	r1, [pc, #232]	; (8002ee0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002df8:	fba2 0101 	umull	r0, r1, r2, r1
 8002dfc:	1863      	adds	r3, r4, r1
 8002dfe:	4619      	mov	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	f7fd fe9a 	bl	8000b40 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4613      	mov	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e04a      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	099b      	lsrs	r3, r3, #6
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e26:	f04f 0100 	mov.w	r1, #0
 8002e2a:	ea02 0400 	and.w	r4, r2, r0
 8002e2e:	ea03 0501 	and.w	r5, r3, r1
 8002e32:	4620      	mov	r0, r4
 8002e34:	4629      	mov	r1, r5
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	014b      	lsls	r3, r1, #5
 8002e40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e44:	0142      	lsls	r2, r0, #5
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	1b00      	subs	r0, r0, r4
 8002e4c:	eb61 0105 	sbc.w	r1, r1, r5
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	018b      	lsls	r3, r1, #6
 8002e5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e5e:	0182      	lsls	r2, r0, #6
 8002e60:	1a12      	subs	r2, r2, r0
 8002e62:	eb63 0301 	sbc.w	r3, r3, r1
 8002e66:	f04f 0000 	mov.w	r0, #0
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	00d9      	lsls	r1, r3, #3
 8002e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e74:	00d0      	lsls	r0, r2, #3
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	1912      	adds	r2, r2, r4
 8002e7c:	eb45 0303 	adc.w	r3, r5, r3
 8002e80:	f04f 0000 	mov.w	r0, #0
 8002e84:	f04f 0100 	mov.w	r1, #0
 8002e88:	0299      	lsls	r1, r3, #10
 8002e8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e8e:	0290      	lsls	r0, r2, #10
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	f7fd fe4e 	bl	8000b40 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	60bb      	str	r3, [r7, #8]
      break;
 8002ec6:	e002      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b04      	ldr	r3, [pc, #16]	; (8002edc <HAL_RCC_GetSysClockFreq+0x164>)
 8002eca:	60bb      	str	r3, [r7, #8]
      break;
 8002ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ece:	68bb      	ldr	r3, [r7, #8]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	017d7840 	.word	0x017d7840

08002ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0a9b      	lsrs	r3, r3, #10
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	080069c0 	.word	0x080069c0

08002f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f28:	f7ff ffdc 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	0b5b      	lsrs	r3, r3, #13
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	4903      	ldr	r1, [pc, #12]	; (8002f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40023800 	.word	0x40023800
 8002f48:	080069c0 	.word	0x080069c0

08002f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e041      	b.n	8002fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fe fadc 	bl	8001530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f000 fc7a 	bl	8003884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d001      	beq.n	8003004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e04e      	b.n	80030a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d022      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x80>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302e:	d01d      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x80>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d018      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x80>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x80>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <HAL_TIM_Base_Start_IT+0xd0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00e      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x80>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d009      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x80>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d004      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x80>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d111      	bne.n	8003090 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b06      	cmp	r3, #6
 800307c:	d010      	beq.n	80030a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0201 	orr.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800308e:	e007      	b.n	80030a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40000c00 	.word	0x40000c00
 80030c0:	40010400 	.word	0x40010400
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40001800 	.word	0x40001800

080030cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e041      	b.n	8003162 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f839 	bl	800316a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f000 fbba 	bl	8003884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <HAL_TIM_PWM_Start+0x24>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	bf14      	ite	ne
 800319c:	2301      	movne	r3, #1
 800319e:	2300      	moveq	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e022      	b.n	80031ea <HAL_TIM_PWM_Start+0x6a>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d109      	bne.n	80031be <HAL_TIM_PWM_Start+0x3e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e015      	b.n	80031ea <HAL_TIM_PWM_Start+0x6a>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d109      	bne.n	80031d8 <HAL_TIM_PWM_Start+0x58>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e008      	b.n	80031ea <HAL_TIM_PWM_Start+0x6a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e07c      	b.n	80032ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_PWM_Start+0x82>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003200:	e013      	b.n	800322a <HAL_TIM_PWM_Start+0xaa>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d104      	bne.n	8003212 <HAL_TIM_PWM_Start+0x92>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003210:	e00b      	b.n	800322a <HAL_TIM_PWM_Start+0xaa>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b08      	cmp	r3, #8
 8003216:	d104      	bne.n	8003222 <HAL_TIM_PWM_Start+0xa2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003220:	e003      	b.n	800322a <HAL_TIM_PWM_Start+0xaa>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2201      	movs	r2, #1
 8003230:	6839      	ldr	r1, [r7, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fe10 	bl	8003e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2d      	ldr	r2, [pc, #180]	; (80032f4 <HAL_TIM_PWM_Start+0x174>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_TIM_PWM_Start+0xcc>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2c      	ldr	r2, [pc, #176]	; (80032f8 <HAL_TIM_PWM_Start+0x178>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d101      	bne.n	8003250 <HAL_TIM_PWM_Start+0xd0>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_TIM_PWM_Start+0xd2>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <HAL_TIM_PWM_Start+0x174>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <HAL_TIM_PWM_Start+0x136>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003278:	d01d      	beq.n	80032b6 <HAL_TIM_PWM_Start+0x136>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <HAL_TIM_PWM_Start+0x17c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d018      	beq.n	80032b6 <HAL_TIM_PWM_Start+0x136>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <HAL_TIM_PWM_Start+0x180>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <HAL_TIM_PWM_Start+0x136>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1c      	ldr	r2, [pc, #112]	; (8003304 <HAL_TIM_PWM_Start+0x184>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_TIM_PWM_Start+0x136>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a16      	ldr	r2, [pc, #88]	; (80032f8 <HAL_TIM_PWM_Start+0x178>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <HAL_TIM_PWM_Start+0x136>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a18      	ldr	r2, [pc, #96]	; (8003308 <HAL_TIM_PWM_Start+0x188>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_TIM_PWM_Start+0x136>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a16      	ldr	r2, [pc, #88]	; (800330c <HAL_TIM_PWM_Start+0x18c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d111      	bne.n	80032da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 0307 	and.w	r3, r3, #7
 80032c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b06      	cmp	r3, #6
 80032c6:	d010      	beq.n	80032ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d8:	e007      	b.n	80032ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40010400 	.word	0x40010400
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800
 8003304:	40000c00 	.word	0x40000c00
 8003308:	40014000 	.word	0x40014000
 800330c:	40001800 	.word	0x40001800

08003310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d122      	bne.n	800336c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b02      	cmp	r3, #2
 8003332:	d11b      	bne.n	800336c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0202 	mvn.w	r2, #2
 800333c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fa77 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 8003358:	e005      	b.n	8003366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa69 	bl	8003832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fa7a 	bl	800385a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0304 	and.w	r3, r3, #4
 8003376:	2b04      	cmp	r3, #4
 8003378:	d122      	bne.n	80033c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	d11b      	bne.n	80033c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0204 	mvn.w	r2, #4
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2202      	movs	r2, #2
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa4d 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa3f 	bl	8003832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 fa50 	bl	800385a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0208 	mvn.w	r2, #8
 80033e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2204      	movs	r2, #4
 80033ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fa23 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa15 	bl	8003832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa26 	bl	800385a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b10      	cmp	r3, #16
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b10      	cmp	r3, #16
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0210 	mvn.w	r2, #16
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2208      	movs	r2, #8
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9f9 	bl	8003846 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f9eb 	bl	8003832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f9fc 	bl	800385a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d10e      	bne.n	8003494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0201 	mvn.w	r2, #1
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f002 fa46 	bl	8005920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	d10e      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d107      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fd78 	bl	8003fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b40      	cmp	r3, #64	; 0x40
 80034cc:	d10e      	bne.n	80034ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b40      	cmp	r3, #64	; 0x40
 80034da:	d107      	bne.n	80034ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f9c1 	bl	800386e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	d10e      	bne.n	8003518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b20      	cmp	r3, #32
 8003506:	d107      	bne.n	8003518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0220 	mvn.w	r2, #32
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 fd42 	bl	8003f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800352c:	2300      	movs	r3, #0
 800352e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800353a:	2302      	movs	r3, #2
 800353c:	e0ae      	b.n	800369c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b0c      	cmp	r3, #12
 800354a:	f200 809f 	bhi.w	800368c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800354e:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003554:	08003589 	.word	0x08003589
 8003558:	0800368d 	.word	0x0800368d
 800355c:	0800368d 	.word	0x0800368d
 8003560:	0800368d 	.word	0x0800368d
 8003564:	080035c9 	.word	0x080035c9
 8003568:	0800368d 	.word	0x0800368d
 800356c:	0800368d 	.word	0x0800368d
 8003570:	0800368d 	.word	0x0800368d
 8003574:	0800360b 	.word	0x0800360b
 8003578:	0800368d 	.word	0x0800368d
 800357c:	0800368d 	.word	0x0800368d
 8003580:	0800368d 	.word	0x0800368d
 8003584:	0800364b 	.word	0x0800364b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fa18 	bl	80039c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0208 	orr.w	r2, r2, #8
 80035a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0204 	bic.w	r2, r2, #4
 80035b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6999      	ldr	r1, [r3, #24]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	619a      	str	r2, [r3, #24]
      break;
 80035c6:	e064      	b.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fa68 	bl	8003aa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6999      	ldr	r1, [r3, #24]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	021a      	lsls	r2, r3, #8
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	619a      	str	r2, [r3, #24]
      break;
 8003608:	e043      	b.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68b9      	ldr	r1, [r7, #8]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fabd 	bl	8003b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0208 	orr.w	r2, r2, #8
 8003624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0204 	bic.w	r2, r2, #4
 8003634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69d9      	ldr	r1, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	61da      	str	r2, [r3, #28]
      break;
 8003648:	e023      	b.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fb11 	bl	8003c78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69d9      	ldr	r1, [r3, #28]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	021a      	lsls	r2, r3, #8
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	61da      	str	r2, [r3, #28]
      break;
 800368a:	e002      	b.n	8003692 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
      break;
 8003690:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_TIM_ConfigClockSource+0x1c>
 80036bc:	2302      	movs	r3, #2
 80036be:	e0b4      	b.n	800382a <HAL_TIM_ConfigClockSource+0x186>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f8:	d03e      	beq.n	8003778 <HAL_TIM_ConfigClockSource+0xd4>
 80036fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fe:	f200 8087 	bhi.w	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003706:	f000 8086 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x172>
 800370a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800370e:	d87f      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003710:	2b70      	cmp	r3, #112	; 0x70
 8003712:	d01a      	beq.n	800374a <HAL_TIM_ConfigClockSource+0xa6>
 8003714:	2b70      	cmp	r3, #112	; 0x70
 8003716:	d87b      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003718:	2b60      	cmp	r3, #96	; 0x60
 800371a:	d050      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x11a>
 800371c:	2b60      	cmp	r3, #96	; 0x60
 800371e:	d877      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003720:	2b50      	cmp	r3, #80	; 0x50
 8003722:	d03c      	beq.n	800379e <HAL_TIM_ConfigClockSource+0xfa>
 8003724:	2b50      	cmp	r3, #80	; 0x50
 8003726:	d873      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d058      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x13a>
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d86f      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003730:	2b30      	cmp	r3, #48	; 0x30
 8003732:	d064      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 8003734:	2b30      	cmp	r3, #48	; 0x30
 8003736:	d86b      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d060      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d867      	bhi.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d05c      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 8003744:	2b10      	cmp	r3, #16
 8003746:	d05a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x15a>
 8003748:	e062      	b.n	8003810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	6899      	ldr	r1, [r3, #8]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f000 fb5d 	bl	8003e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800376c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	609a      	str	r2, [r3, #8]
      break;
 8003776:	e04f      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6899      	ldr	r1, [r3, #8]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f000 fb46 	bl	8003e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800379a:	609a      	str	r2, [r3, #8]
      break;
 800379c:	e03c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f000 faba 	bl	8003d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2150      	movs	r1, #80	; 0x50
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fb13 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 80037bc:	e02c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 fad9 	bl	8003d82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2160      	movs	r1, #96	; 0x60
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fb03 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 80037dc:	e01c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 fa9a 	bl	8003d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2140      	movs	r1, #64	; 0x40
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 faf3 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 80037fc:	e00c      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f000 faea 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 800380e:	e003      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      break;
 8003814:	e000      	b.n	8003818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003828:	7bfb      	ldrb	r3, [r7, #15]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a40      	ldr	r2, [pc, #256]	; (8003998 <TIM_Base_SetConfig+0x114>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a2:	d00f      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a3d      	ldr	r2, [pc, #244]	; (800399c <TIM_Base_SetConfig+0x118>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3c      	ldr	r2, [pc, #240]	; (80039a0 <TIM_Base_SetConfig+0x11c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d007      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <TIM_Base_SetConfig+0x120>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d003      	beq.n	80038c4 <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a3a      	ldr	r2, [pc, #232]	; (80039a8 <TIM_Base_SetConfig+0x124>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d108      	bne.n	80038d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2f      	ldr	r2, [pc, #188]	; (8003998 <TIM_Base_SetConfig+0x114>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02b      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d027      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2c      	ldr	r2, [pc, #176]	; (800399c <TIM_Base_SetConfig+0x118>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d023      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a2b      	ldr	r2, [pc, #172]	; (80039a0 <TIM_Base_SetConfig+0x11c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01f      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <TIM_Base_SetConfig+0x120>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01b      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a29      	ldr	r2, [pc, #164]	; (80039a8 <TIM_Base_SetConfig+0x124>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d017      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a28      	ldr	r2, [pc, #160]	; (80039ac <TIM_Base_SetConfig+0x128>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <TIM_Base_SetConfig+0x12c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00f      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a26      	ldr	r2, [pc, #152]	; (80039b4 <TIM_Base_SetConfig+0x130>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00b      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a25      	ldr	r2, [pc, #148]	; (80039b8 <TIM_Base_SetConfig+0x134>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d007      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a24      	ldr	r2, [pc, #144]	; (80039bc <TIM_Base_SetConfig+0x138>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a23      	ldr	r2, [pc, #140]	; (80039c0 <TIM_Base_SetConfig+0x13c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d108      	bne.n	8003948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <TIM_Base_SetConfig+0x114>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_Base_SetConfig+0xf8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <TIM_Base_SetConfig+0x124>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d103      	bne.n	8003984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	615a      	str	r2, [r3, #20]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40010000 	.word	0x40010000
 800399c:	40000400 	.word	0x40000400
 80039a0:	40000800 	.word	0x40000800
 80039a4:	40000c00 	.word	0x40000c00
 80039a8:	40010400 	.word	0x40010400
 80039ac:	40014000 	.word	0x40014000
 80039b0:	40014400 	.word	0x40014400
 80039b4:	40014800 	.word	0x40014800
 80039b8:	40001800 	.word	0x40001800
 80039bc:	40001c00 	.word	0x40001c00
 80039c0:	40002000 	.word	0x40002000

080039c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f023 0201 	bic.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 0302 	bic.w	r3, r3, #2
 8003a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <TIM_OC1_SetConfig+0xd8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_OC1_SetConfig+0x64>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <TIM_OC1_SetConfig+0xdc>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d10c      	bne.n	8003a42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0308 	bic.w	r3, r3, #8
 8003a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <TIM_OC1_SetConfig+0xd8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_OC1_SetConfig+0x8e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <TIM_OC1_SetConfig+0xdc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d111      	bne.n	8003a76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	f023 0210 	bic.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <TIM_OC2_SetConfig+0xe4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_OC2_SetConfig+0x68>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a21      	ldr	r2, [pc, #132]	; (8003b8c <TIM_OC2_SetConfig+0xe8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10d      	bne.n	8003b28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <TIM_OC2_SetConfig+0xe4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_OC2_SetConfig+0x94>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <TIM_OC2_SetConfig+0xe8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d113      	bne.n	8003b60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40010400 	.word	0x40010400

08003b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <TIM_OC3_SetConfig+0xe0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC3_SetConfig+0x66>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a20      	ldr	r2, [pc, #128]	; (8003c74 <TIM_OC3_SetConfig+0xe4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10d      	bne.n	8003c12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <TIM_OC3_SetConfig+0xe0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d003      	beq.n	8003c22 <TIM_OC3_SetConfig+0x92>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <TIM_OC3_SetConfig+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d113      	bne.n	8003c4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	621a      	str	r2, [r3, #32]
}
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40010400 	.word	0x40010400

08003c78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	021b      	lsls	r3, r3, #8
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <TIM_OC4_SetConfig+0xa4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_OC4_SetConfig+0x68>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <TIM_OC4_SetConfig+0xa8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d109      	bne.n	8003cf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40010000 	.word	0x40010000
 8003d20:	40010400 	.word	0x40010400

08003d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f023 030a 	bic.w	r3, r3, #10
 8003d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b087      	sub	sp, #28
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f023 0210 	bic.w	r2, r3, #16
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f043 0307 	orr.w	r3, r3, #7
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	021a      	lsls	r2, r3, #8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	609a      	str	r2, [r3, #8]
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a1a      	ldr	r2, [r3, #32]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e05a      	b.n	8003f72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d022      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f08:	d01d      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d018      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1a      	ldr	r2, [pc, #104]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10c      	bne.n	8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40001800 	.word	0x40001800

08003f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e03f      	b.n	8004056 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fd fbd2 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	; 0x24
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fc7b 	bl	8004904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800401c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800402c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800403c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b0ba      	sub	sp, #232	; 0xe8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004086:	2300      	movs	r3, #0
 8004088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800409e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <HAL_UART_IRQHandler+0x66>
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fb65 	bl	800478e <UART_Receive_IT>
      return;
 80040c4:	e256      	b.n	8004574 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80040c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80de 	beq.w	800428c <HAL_UART_IRQHandler+0x22c>
 80040d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80d1 	beq.w	800428c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_UART_IRQHandler+0xae>
 80040f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_UART_IRQHandler+0xd2>
 800411a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 0202 	orr.w	r2, r3, #2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_UART_IRQHandler+0xf6>
 800413e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d005      	beq.n	8004156 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f043 0204 	orr.w	r2, r3, #4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d011      	beq.n	8004186 <HAL_UART_IRQHandler+0x126>
 8004162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d105      	bne.n	800417a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800416e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f043 0208 	orr.w	r2, r3, #8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 81ed 	beq.w	800456a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_UART_IRQHandler+0x14e>
 800419c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 faf0 	bl	800478e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_UART_IRQHandler+0x17a>
 80041d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d04f      	beq.n	800427a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f9f8 	bl	80045d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	d141      	bne.n	8004272 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3314      	adds	r3, #20
 80041f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3314      	adds	r3, #20
 8004216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800421a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800421e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1d9      	bne.n	80041ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	2b00      	cmp	r3, #0
 8004240:	d013      	beq.n	800426a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	4a7d      	ldr	r2, [pc, #500]	; (800443c <HAL_UART_IRQHandler+0x3dc>)
 8004248:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd fe20 	bl	8001e94 <HAL_DMA_Abort_IT>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d016      	beq.n	8004288 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004264:	4610      	mov	r0, r2
 8004266:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	e00e      	b.n	8004288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f99a 	bl	80045a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	e00a      	b.n	8004288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f996 	bl	80045a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	e006      	b.n	8004288 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f992 	bl	80045a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004286:	e170      	b.n	800456a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004288:	bf00      	nop
    return;
 800428a:	e16e      	b.n	800456a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	2b01      	cmp	r3, #1
 8004292:	f040 814a 	bne.w	800452a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8143 	beq.w	800452a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80042a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 813c 	beq.w	800452a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	f040 80b4 	bne.w	8004440 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8140 	beq.w	800456e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042f6:	429a      	cmp	r2, r3
 80042f8:	f080 8139 	bcs.w	800456e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004302:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800430e:	f000 8088 	beq.w	8004422 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	330c      	adds	r3, #12
 8004318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800432c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004330:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	330c      	adds	r3, #12
 800433a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800433e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800434a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004356:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1d9      	bne.n	8004312 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3314      	adds	r3, #20
 8004364:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800436e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004370:	f023 0301 	bic.w	r3, r3, #1
 8004374:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3314      	adds	r3, #20
 800437e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004382:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004386:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800438a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e1      	bne.n	800435e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3314      	adds	r3, #20
 80043ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e3      	bne.n	800439a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f2:	f023 0310 	bic.w	r3, r3, #16
 80043f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004404:	65ba      	str	r2, [r7, #88]	; 0x58
 8004406:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800440a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e3      	bne.n	80043e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	4618      	mov	r0, r3
 800441e:	f7fd fcc9 	bl	8001db4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800442a:	b29b      	uxth	r3, r3
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	b29b      	uxth	r3, r3
 8004430:	4619      	mov	r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f8c0 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004438:	e099      	b.n	800456e <HAL_UART_IRQHandler+0x50e>
 800443a:	bf00      	nop
 800443c:	08004697 	.word	0x08004697
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004448:	b29b      	uxth	r3, r3
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 808b 	beq.w	8004572 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800445c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8086 	beq.w	8004572 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	330c      	adds	r3, #12
 800446c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800447c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800448a:	647a      	str	r2, [r7, #68]	; 0x44
 800448c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004490:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e3      	bne.n	8004466 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3314      	adds	r3, #20
 80044a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	623b      	str	r3, [r7, #32]
   return(result);
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3314      	adds	r3, #20
 80044be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044c2:	633a      	str	r2, [r7, #48]	; 0x30
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e3      	bne.n	800449e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	330c      	adds	r3, #12
 80044ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0310 	bic.w	r3, r3, #16
 80044fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	330c      	adds	r3, #12
 8004504:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004508:	61fa      	str	r2, [r7, #28]
 800450a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	69b9      	ldr	r1, [r7, #24]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	617b      	str	r3, [r7, #20]
   return(result);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e3      	bne.n	80044e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800451c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f848 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004528:	e023      	b.n	8004572 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_UART_IRQHandler+0x4ea>
 8004536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8bb 	bl	80046be <UART_Transmit_IT>
    return;
 8004548:	e014      	b.n	8004574 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00e      	beq.n	8004574 <HAL_UART_IRQHandler+0x514>
 8004556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8fb 	bl	800475e <UART_EndTransmit_IT>
    return;
 8004568:	e004      	b.n	8004574 <HAL_UART_IRQHandler+0x514>
    return;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <HAL_UART_IRQHandler+0x514>
      return;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <HAL_UART_IRQHandler+0x514>
      return;
 8004572:	bf00      	nop
  }
}
 8004574:	37e8      	adds	r7, #232	; 0xe8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop

0800457c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b095      	sub	sp, #84	; 0x54
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045f8:	643a      	str	r2, [r7, #64]	; 0x40
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e5      	bne.n	80045d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3314      	adds	r3, #20
 8004612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	61fb      	str	r3, [r7, #28]
   return(result);
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	64bb      	str	r3, [r7, #72]	; 0x48
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3314      	adds	r3, #20
 800462a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800462c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e5      	bne.n	800460c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004644:	2b01      	cmp	r3, #1
 8004646:	d119      	bne.n	800467c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	330c      	adds	r3, #12
 800464e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	60bb      	str	r3, [r7, #8]
   return(result);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f023 0310 	bic.w	r3, r3, #16
 800465e:	647b      	str	r3, [r7, #68]	; 0x44
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004668:	61ba      	str	r2, [r7, #24]
 800466a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	6979      	ldr	r1, [r7, #20]
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	613b      	str	r3, [r7, #16]
   return(result);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e5      	bne.n	8004648 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	; 0x30
}
 800468a:	bf00      	nop
 800468c:	3754      	adds	r7, #84	; 0x54
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff ff77 	bl	80045a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b21      	cmp	r3, #33	; 0x21
 80046d0:	d13e      	bne.n	8004750 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	d114      	bne.n	8004706 <UART_Transmit_IT+0x48>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d110      	bne.n	8004706 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	621a      	str	r2, [r3, #32]
 8004704:	e008      	b.n	8004718 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	1c59      	adds	r1, r3, #1
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6211      	str	r1, [r2, #32]
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b01      	subs	r3, #1
 8004720:	b29b      	uxth	r3, r3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4619      	mov	r1, r3
 8004726:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800473a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800474a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	e000      	b.n	8004752 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
  }
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004774:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fefc 	bl	800457c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b08c      	sub	sp, #48	; 0x30
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b22      	cmp	r3, #34	; 0x22
 80047a0:	f040 80ab 	bne.w	80048fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ac:	d117      	bne.n	80047de <UART_Receive_IT+0x50>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d113      	bne.n	80047de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	1c9a      	adds	r2, r3, #2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
 80047dc:	e026      	b.n	800482c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f0:	d007      	beq.n	8004802 <UART_Receive_IT+0x74>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <UART_Receive_IT+0x82>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e008      	b.n	8004822 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481c:	b2da      	uxtb	r2, r3
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29b      	uxth	r3, r3
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	4619      	mov	r1, r3
 800483a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800483c:	2b00      	cmp	r3, #0
 800483e:	d15a      	bne.n	80048f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0220 	bic.w	r2, r2, #32
 800484e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800485e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	2b01      	cmp	r3, #1
 800487e:	d135      	bne.n	80048ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	613b      	str	r3, [r7, #16]
   return(result);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f023 0310 	bic.w	r3, r3, #16
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	330c      	adds	r3, #12
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	623a      	str	r2, [r7, #32]
 80048a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	69f9      	ldr	r1, [r7, #28]
 80048ac:	6a3a      	ldr	r2, [r7, #32]
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e5      	bne.n	8004886 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d10a      	bne.n	80048de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff fe67 	bl	80045b8 <HAL_UARTEx_RxEventCallback>
 80048ea:	e002      	b.n	80048f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff fe4f 	bl	8004590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e002      	b.n	80048fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e000      	b.n	80048fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048fa:	2302      	movs	r3, #2
  }
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3730      	adds	r7, #48	; 0x30
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004908:	b09f      	sub	sp, #124	; 0x7c
 800490a:	af00      	add	r7, sp, #0
 800490c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800490e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491a:	68d9      	ldr	r1, [r3, #12]
 800491c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	ea40 0301 	orr.w	r3, r0, r1
 8004924:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	431a      	orrs	r2, r3
 8004930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	431a      	orrs	r2, r3
 8004936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	4313      	orrs	r3, r2
 800493c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800493e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004948:	f021 010c 	bic.w	r1, r1, #12
 800494c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004952:	430b      	orrs	r3, r1
 8004954:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004962:	6999      	ldr	r1, [r3, #24]
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	ea40 0301 	orr.w	r3, r0, r1
 800496c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800496e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4bc5      	ldr	r3, [pc, #788]	; (8004c88 <UART_SetConfig+0x384>)
 8004974:	429a      	cmp	r2, r3
 8004976:	d004      	beq.n	8004982 <UART_SetConfig+0x7e>
 8004978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4bc3      	ldr	r3, [pc, #780]	; (8004c8c <UART_SetConfig+0x388>)
 800497e:	429a      	cmp	r2, r3
 8004980:	d103      	bne.n	800498a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004982:	f7fe facf 	bl	8002f24 <HAL_RCC_GetPCLK2Freq>
 8004986:	6778      	str	r0, [r7, #116]	; 0x74
 8004988:	e002      	b.n	8004990 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800498a:	f7fe fab7 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 800498e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004998:	f040 80b6 	bne.w	8004b08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800499c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800499e:	461c      	mov	r4, r3
 80049a0:	f04f 0500 	mov.w	r5, #0
 80049a4:	4622      	mov	r2, r4
 80049a6:	462b      	mov	r3, r5
 80049a8:	1891      	adds	r1, r2, r2
 80049aa:	6439      	str	r1, [r7, #64]	; 0x40
 80049ac:	415b      	adcs	r3, r3
 80049ae:	647b      	str	r3, [r7, #68]	; 0x44
 80049b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049b4:	1912      	adds	r2, r2, r4
 80049b6:	eb45 0303 	adc.w	r3, r5, r3
 80049ba:	f04f 0000 	mov.w	r0, #0
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	00d9      	lsls	r1, r3, #3
 80049c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049c8:	00d0      	lsls	r0, r2, #3
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	1911      	adds	r1, r2, r4
 80049d0:	6639      	str	r1, [r7, #96]	; 0x60
 80049d2:	416b      	adcs	r3, r5
 80049d4:	667b      	str	r3, [r7, #100]	; 0x64
 80049d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	461a      	mov	r2, r3
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	1891      	adds	r1, r2, r2
 80049e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049e4:	415b      	adcs	r3, r3
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80049f0:	f7fc f8a6 	bl	8000b40 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4ba5      	ldr	r3, [pc, #660]	; (8004c90 <UART_SetConfig+0x38c>)
 80049fa:	fba3 2302 	umull	r2, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	011e      	lsls	r6, r3, #4
 8004a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a04:	461c      	mov	r4, r3
 8004a06:	f04f 0500 	mov.w	r5, #0
 8004a0a:	4622      	mov	r2, r4
 8004a0c:	462b      	mov	r3, r5
 8004a0e:	1891      	adds	r1, r2, r2
 8004a10:	6339      	str	r1, [r7, #48]	; 0x30
 8004a12:	415b      	adcs	r3, r3
 8004a14:	637b      	str	r3, [r7, #52]	; 0x34
 8004a16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a1a:	1912      	adds	r2, r2, r4
 8004a1c:	eb45 0303 	adc.w	r3, r5, r3
 8004a20:	f04f 0000 	mov.w	r0, #0
 8004a24:	f04f 0100 	mov.w	r1, #0
 8004a28:	00d9      	lsls	r1, r3, #3
 8004a2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a2e:	00d0      	lsls	r0, r2, #3
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	1911      	adds	r1, r2, r4
 8004a36:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a38:	416b      	adcs	r3, r5
 8004a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	461a      	mov	r2, r3
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	1891      	adds	r1, r2, r2
 8004a48:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a4a:	415b      	adcs	r3, r3
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a56:	f7fc f873 	bl	8000b40 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4b8c      	ldr	r3, [pc, #560]	; (8004c90 <UART_SetConfig+0x38c>)
 8004a60:	fba3 1302 	umull	r1, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	2164      	movs	r1, #100	; 0x64
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	3332      	adds	r3, #50	; 0x32
 8004a72:	4a87      	ldr	r2, [pc, #540]	; (8004c90 <UART_SetConfig+0x38c>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a80:	441e      	add	r6, r3
 8004a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a84:	4618      	mov	r0, r3
 8004a86:	f04f 0100 	mov.w	r1, #0
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	1894      	adds	r4, r2, r2
 8004a90:	623c      	str	r4, [r7, #32]
 8004a92:	415b      	adcs	r3, r3
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
 8004a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a9a:	1812      	adds	r2, r2, r0
 8004a9c:	eb41 0303 	adc.w	r3, r1, r3
 8004aa0:	f04f 0400 	mov.w	r4, #0
 8004aa4:	f04f 0500 	mov.w	r5, #0
 8004aa8:	00dd      	lsls	r5, r3, #3
 8004aaa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004aae:	00d4      	lsls	r4, r2, #3
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	1814      	adds	r4, r2, r0
 8004ab6:	653c      	str	r4, [r7, #80]	; 0x50
 8004ab8:	414b      	adcs	r3, r1
 8004aba:	657b      	str	r3, [r7, #84]	; 0x54
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	1891      	adds	r1, r2, r2
 8004ac8:	61b9      	str	r1, [r7, #24]
 8004aca:	415b      	adcs	r3, r3
 8004acc:	61fb      	str	r3, [r7, #28]
 8004ace:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ad6:	f7fc f833 	bl	8000b40 <__aeabi_uldivmod>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <UART_SetConfig+0x38c>)
 8004ae0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	2164      	movs	r1, #100	; 0x64
 8004ae8:	fb01 f303 	mul.w	r3, r1, r3
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	3332      	adds	r3, #50	; 0x32
 8004af2:	4a67      	ldr	r2, [pc, #412]	; (8004c90 <UART_SetConfig+0x38c>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	f003 0207 	and.w	r2, r3, #7
 8004afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4432      	add	r2, r6
 8004b04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b06:	e0b9      	b.n	8004c7c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b0a:	461c      	mov	r4, r3
 8004b0c:	f04f 0500 	mov.w	r5, #0
 8004b10:	4622      	mov	r2, r4
 8004b12:	462b      	mov	r3, r5
 8004b14:	1891      	adds	r1, r2, r2
 8004b16:	6139      	str	r1, [r7, #16]
 8004b18:	415b      	adcs	r3, r3
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b20:	1912      	adds	r2, r2, r4
 8004b22:	eb45 0303 	adc.w	r3, r5, r3
 8004b26:	f04f 0000 	mov.w	r0, #0
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	00d9      	lsls	r1, r3, #3
 8004b30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b34:	00d0      	lsls	r0, r2, #3
 8004b36:	4602      	mov	r2, r0
 8004b38:	460b      	mov	r3, r1
 8004b3a:	eb12 0804 	adds.w	r8, r2, r4
 8004b3e:	eb43 0905 	adc.w	r9, r3, r5
 8004b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f04f 0100 	mov.w	r1, #0
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	008b      	lsls	r3, r1, #2
 8004b56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b5a:	0082      	lsls	r2, r0, #2
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	4649      	mov	r1, r9
 8004b60:	f7fb ffee 	bl	8000b40 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4b49      	ldr	r3, [pc, #292]	; (8004c90 <UART_SetConfig+0x38c>)
 8004b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	011e      	lsls	r6, r3, #4
 8004b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b74:	4618      	mov	r0, r3
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	1894      	adds	r4, r2, r2
 8004b80:	60bc      	str	r4, [r7, #8]
 8004b82:	415b      	adcs	r3, r3
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b8a:	1812      	adds	r2, r2, r0
 8004b8c:	eb41 0303 	adc.w	r3, r1, r3
 8004b90:	f04f 0400 	mov.w	r4, #0
 8004b94:	f04f 0500 	mov.w	r5, #0
 8004b98:	00dd      	lsls	r5, r3, #3
 8004b9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b9e:	00d4      	lsls	r4, r2, #3
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	1814      	adds	r4, r2, r0
 8004ba6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ba8:	414b      	adcs	r3, r1
 8004baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f04f 0100 	mov.w	r1, #0
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	008b      	lsls	r3, r1, #2
 8004bc0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bc4:	0082      	lsls	r2, r0, #2
 8004bc6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004bca:	f7fb ffb9 	bl	8000b40 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4b2f      	ldr	r3, [pc, #188]	; (8004c90 <UART_SetConfig+0x38c>)
 8004bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	2164      	movs	r1, #100	; 0x64
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	3332      	adds	r3, #50	; 0x32
 8004be6:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <UART_SetConfig+0x38c>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	095b      	lsrs	r3, r3, #5
 8004bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf2:	441e      	add	r6, r3
 8004bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f04f 0100 	mov.w	r1, #0
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	460b      	mov	r3, r1
 8004c00:	1894      	adds	r4, r2, r2
 8004c02:	603c      	str	r4, [r7, #0]
 8004c04:	415b      	adcs	r3, r3
 8004c06:	607b      	str	r3, [r7, #4]
 8004c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c0c:	1812      	adds	r2, r2, r0
 8004c0e:	eb41 0303 	adc.w	r3, r1, r3
 8004c12:	f04f 0400 	mov.w	r4, #0
 8004c16:	f04f 0500 	mov.w	r5, #0
 8004c1a:	00dd      	lsls	r5, r3, #3
 8004c1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c20:	00d4      	lsls	r4, r2, #3
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	eb12 0a00 	adds.w	sl, r2, r0
 8004c2a:	eb43 0b01 	adc.w	fp, r3, r1
 8004c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f04f 0100 	mov.w	r1, #0
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	f04f 0300 	mov.w	r3, #0
 8004c40:	008b      	lsls	r3, r1, #2
 8004c42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c46:	0082      	lsls	r2, r0, #2
 8004c48:	4650      	mov	r0, sl
 8004c4a:	4659      	mov	r1, fp
 8004c4c:	f7fb ff78 	bl	8000b40 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <UART_SetConfig+0x38c>)
 8004c56:	fba3 1302 	umull	r1, r3, r3, r2
 8004c5a:	095b      	lsrs	r3, r3, #5
 8004c5c:	2164      	movs	r1, #100	; 0x64
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	3332      	adds	r3, #50	; 0x32
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <UART_SetConfig+0x38c>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	f003 020f 	and.w	r2, r3, #15
 8004c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4432      	add	r2, r6
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	377c      	adds	r7, #124	; 0x7c
 8004c80:	46bd      	mov	sp, r7
 8004c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c86:	bf00      	nop
 8004c88:	40011000 	.word	0x40011000
 8004c8c:	40011400 	.word	0x40011400
 8004c90:	51eb851f 	.word	0x51eb851f

08004c94 <stepper_motor_init>:
	float phase_6 ;
} max_fre_t;

max_fre_t max_fre [3];
void stepper_motor_init(motors_t motors)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]
	switch(motors)
 8004c9e:	79fb      	ldrb	r3, [r7, #7]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d023      	beq.n	8004cec <stepper_motor_init+0x58>
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	dc2f      	bgt.n	8004d08 <stepper_motor_init+0x74>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <stepper_motor_init+0x1e>
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d00f      	beq.n	8004cd0 <stepper_motor_init+0x3c>
		HAL_GPIO_WritePin(MOTOR_Y_RST_GPIO_Port, MOTOR_Y_RST_Pin, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&MOTOR_X_TIMER, MOTOR_X_CHANEL, 0);
		HAL_TIM_PWM_Start(&MOTOR_X_TIMER, MOTOR_X_CHANEL);
		break;
	}
}
 8004cb0:	e02a      	b.n	8004d08 <stepper_motor_init+0x74>
		HAL_GPIO_WritePin(MOTOR_X_RST_GPIO_Port, MOTOR_X_RST_Pin, GPIO_PIN_SET);
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cb8:	4815      	ldr	r0, [pc, #84]	; (8004d10 <stepper_motor_init+0x7c>)
 8004cba:	f7fd fce5 	bl	8002688 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&MOTOR_X_TIMER, MOTOR_X_CHANEL, 0);
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <stepper_motor_init+0x80>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&MOTOR_X_TIMER, MOTOR_X_CHANEL);
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4812      	ldr	r0, [pc, #72]	; (8004d14 <stepper_motor_init+0x80>)
 8004cca:	f7fe fa59 	bl	8003180 <HAL_TIM_PWM_Start>
		break;
 8004cce:	e01b      	b.n	8004d08 <stepper_motor_init+0x74>
		HAL_GPIO_WritePin(MOTOR_Y_RST_GPIO_Port, MOTOR_Y_RST_Pin, GPIO_PIN_SET);
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	2108      	movs	r1, #8
 8004cd4:	4810      	ldr	r0, [pc, #64]	; (8004d18 <stepper_motor_init+0x84>)
 8004cd6:	f7fd fcd7 	bl	8002688 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&MOTOR_X_TIMER, MOTOR_X_CHANEL, 0);
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <stepper_motor_init+0x80>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&MOTOR_X_TIMER, MOTOR_X_CHANEL);
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	480b      	ldr	r0, [pc, #44]	; (8004d14 <stepper_motor_init+0x80>)
 8004ce6:	f7fe fa4b 	bl	8003180 <HAL_TIM_PWM_Start>
		break;
 8004cea:	e00d      	b.n	8004d08 <stepper_motor_init+0x74>
		HAL_GPIO_WritePin(MOTOR_Y_RST_GPIO_Port, MOTOR_Y_RST_Pin, GPIO_PIN_SET);
 8004cec:	2201      	movs	r2, #1
 8004cee:	2108      	movs	r1, #8
 8004cf0:	4809      	ldr	r0, [pc, #36]	; (8004d18 <stepper_motor_init+0x84>)
 8004cf2:	f7fd fcc9 	bl	8002688 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&MOTOR_X_TIMER, MOTOR_X_CHANEL, 0);
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <stepper_motor_init+0x80>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&MOTOR_X_TIMER, MOTOR_X_CHANEL);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4804      	ldr	r0, [pc, #16]	; (8004d14 <stepper_motor_init+0x80>)
 8004d02:	f7fe fa3d 	bl	8003180 <HAL_TIM_PWM_Start>
		break;
 8004d06:	bf00      	nop
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40020c00 	.word	0x40020c00
 8004d14:	200000b0 	.word	0x200000b0
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	00000000 	.word	0x00000000

08004d20 <stepper_motor_set_param>:
		HAL_GPIO_WritePin(MOTOR_Y_RST_GPIO_Port, MOTOR_Y_RST_Pin, GPIO_PIN_RESET);
	}
}

void stepper_motor_set_param(motors_t motors, uint16_t set_fre)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4603      	mov	r3, r0
 8004d28:	460a      	mov	r2, r1
 8004d2a:	71fb      	strb	r3, [r7, #7]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	80bb      	strh	r3, [r7, #4]
	param[motors].set_fre = set_fre;
 8004d30:	79fb      	ldrb	r3, [r7, #7]
 8004d32:	4a25      	ldr	r2, [pc, #148]	; (8004dc8 <stepper_motor_set_param+0xa8>)
 8004d34:	015b      	lsls	r3, r3, #5
 8004d36:	4413      	add	r3, r2
 8004d38:	88ba      	ldrh	r2, [r7, #4]
 8004d3a:	801a      	strh	r2, [r3, #0]
	param[motors].one_phase_time = (float)sqrtf(set_fre/(2*MAX_ACC_DE_DIFFERIENT));
 8004d3c:	88bb      	ldrh	r3, [r7, #4]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fb fb94 	bl	800046c <__aeabi_i2d>
 8004d44:	a31c      	add	r3, pc, #112	; (adr r3, 8004db8 <stepper_motor_set_param+0x98>)
 8004d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4a:	f7fb fd23 	bl	8000794 <__aeabi_ddiv>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4610      	mov	r0, r2
 8004d54:	4619      	mov	r1, r3
 8004d56:	f7fb fea3 	bl	8000aa0 <__aeabi_d2f>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	79fc      	ldrb	r4, [r7, #7]
 8004d5e:	ee00 3a10 	vmov	s0, r3
 8004d62:	f000 fee7 	bl	8005b34 <sqrtf>
 8004d66:	eef0 7a40 	vmov.f32	s15, s0
 8004d6a:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <stepper_motor_set_param+0xa8>)
 8004d6c:	0163      	lsls	r3, r4, #5
 8004d6e:	4413      	add	r3, r2
 8004d70:	3308      	adds	r3, #8
 8004d72:	edc3 7a00 	vstr	s15, [r3]
	param[motors].max_acc_decel = param[motors].one_phase_time * MAX_ACC_DE_DIFFERIENT;
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <stepper_motor_set_param+0xa8>)
 8004d7a:	015b      	lsls	r3, r3, #5
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3308      	adds	r3, #8
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb fb84 	bl	8000490 <__aeabi_f2d>
 8004d88:	a30d      	add	r3, pc, #52	; (adr r3, 8004dc0 <stepper_motor_set_param+0xa0>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb fbd7 	bl	8000540 <__aeabi_dmul>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	79fc      	ldrb	r4, [r7, #7]
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f7fb fe80 	bl	8000aa0 <__aeabi_d2f>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4909      	ldr	r1, [pc, #36]	; (8004dc8 <stepper_motor_set_param+0xa8>)
 8004da4:	0163      	lsls	r3, r4, #5
 8004da6:	440b      	add	r3, r1
 8004da8:	3304      	adds	r3, #4
 8004daa:	601a      	str	r2, [r3, #0]
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd90      	pop	{r4, r7, pc}
 8004db4:	f3af 8000 	nop.w
 8004db8:	47ae147b 	.word	0x47ae147b
 8004dbc:	3fa47ae1 	.word	0x3fa47ae1
 8004dc0:	47ae147b 	.word	0x47ae147b
 8004dc4:	3f947ae1 	.word	0x3f947ae1
 8004dc8:	200002d8 	.word	0x200002d8

08004dcc <run_motor>:

static void run_motor (motors_t motors)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
	switch(motors)
 8004dd6:	79fb      	ldrb	r3, [r7, #7]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d044      	beq.n	8004e66 <run_motor+0x9a>
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	dc61      	bgt.n	8004ea4 <run_motor+0xd8>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <run_motor+0x1e>
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d01f      	beq.n	8004e28 <run_motor+0x5c>
				MOTOR_Z_TIMER.Instance -> ARR = counter_period;
				__HAL_TIM_SET_COMPARE(&MOTOR_Z_TIMER, MOTOR_Z_CHANEL, counter_period/2);
				break;
			}

}
 8004de8:	e05c      	b.n	8004ea4 <run_motor+0xd8>
				counter_period = (uint16_t)1000.0f/param[motors].current_fre;
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	4a30      	ldr	r2, [pc, #192]	; (8004eb0 <run_motor+0xe4>)
 8004dee:	015b      	lsls	r3, r3, #5
 8004df0:	4413      	add	r3, r2
 8004df2:	3318      	adds	r3, #24
 8004df4:	ed93 7a00 	vldr	s14, [r3]
 8004df8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8004eb4 <run_motor+0xe8>
 8004dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e04:	ee17 3a90 	vmov	r3, s15
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <run_motor+0xec>)
 8004e0c:	801a      	strh	r2, [r3, #0]
				MOTOR_X_TIMER.Instance -> ARR = counter_period;
 8004e0e:	4b2a      	ldr	r3, [pc, #168]	; (8004eb8 <run_motor+0xec>)
 8004e10:	881a      	ldrh	r2, [r3, #0]
 8004e12:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <run_motor+0xf0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c
				__HAL_TIM_SET_COMPARE(&MOTOR_X_TIMER, MOTOR_X_CHANEL, counter_period/2);
 8004e18:	4b27      	ldr	r3, [pc, #156]	; (8004eb8 <run_motor+0xec>)
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <run_motor+0xf0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8004e26:	e03d      	b.n	8004ea4 <run_motor+0xd8>
				counter_period = (uint16_t)(1000.0f/param[motors].current_fre);
 8004e28:	79fb      	ldrb	r3, [r7, #7]
 8004e2a:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <run_motor+0xe4>)
 8004e2c:	015b      	lsls	r3, r3, #5
 8004e2e:	4413      	add	r3, r2
 8004e30:	3318      	adds	r3, #24
 8004e32:	ed93 7a00 	vldr	s14, [r3]
 8004e36:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004eb4 <run_motor+0xe8>
 8004e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e42:	ee17 3a90 	vmov	r3, s15
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <run_motor+0xec>)
 8004e4a:	801a      	strh	r2, [r3, #0]
				MOTOR_Y_TIMER.Instance -> ARR = counter_period;
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	; (8004eb8 <run_motor+0xec>)
 8004e4e:	881a      	ldrh	r2, [r3, #0]
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <run_motor+0xf4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c
				__HAL_TIM_SET_COMPARE(&MOTOR_Y_TIMER, MOTOR_Y_CHANEL, counter_period/2);
 8004e56:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <run_motor+0xec>)
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	4b18      	ldr	r3, [pc, #96]	; (8004ec0 <run_motor+0xf4>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8004e64:	e01e      	b.n	8004ea4 <run_motor+0xd8>
				counter_period = (uint16_t)(1000.0f/param[motors].current_fre);
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	4a11      	ldr	r2, [pc, #68]	; (8004eb0 <run_motor+0xe4>)
 8004e6a:	015b      	lsls	r3, r3, #5
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3318      	adds	r3, #24
 8004e70:	ed93 7a00 	vldr	s14, [r3]
 8004e74:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004eb4 <run_motor+0xe8>
 8004e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e80:	ee17 3a90 	vmov	r3, s15
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <run_motor+0xec>)
 8004e88:	801a      	strh	r2, [r3, #0]
				MOTOR_Z_TIMER.Instance -> ARR = counter_period;
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <run_motor+0xec>)
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <run_motor+0xf8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c
				__HAL_TIM_SET_COMPARE(&MOTOR_Z_TIMER, MOTOR_Z_CHANEL, counter_period/2);
 8004e94:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <run_motor+0xec>)
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <run_motor+0xf8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8004ea2:	bf00      	nop
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	200002d8 	.word	0x200002d8
 8004eb4:	447a0000 	.word	0x447a0000
 8004eb8:	20000390 	.word	0x20000390
 8004ebc:	200000b0 	.word	0x200000b0
 8004ec0:	200000f8 	.word	0x200000f8
 8004ec4:	20000140 	.word	0x20000140

08004ec8 <excute_phase_0>:
void excute_phase_0(motors_t motors)
{
 8004ec8:	b590      	push	{r4, r7, lr}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
	param[motors].acc_decel_defferient = MAX_ACC_DE_DIFFERIENT;
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	4a44      	ldr	r2, [pc, #272]	; (8004fe8 <excute_phase_0+0x120>)
 8004ed6:	015b      	lsls	r3, r3, #5
 8004ed8:	4413      	add	r3, r2
 8004eda:	330c      	adds	r3, #12
 8004edc:	4a43      	ldr	r2, [pc, #268]	; (8004fec <excute_phase_0+0x124>)
 8004ede:	601a      	str	r2, [r3, #0]

	if(param[motors].cnt_time < param[motors].one_phase_time)
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	4a41      	ldr	r2, [pc, #260]	; (8004fe8 <excute_phase_0+0x120>)
 8004ee4:	015b      	lsls	r3, r3, #5
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3310      	adds	r3, #16
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	4a3b      	ldr	r2, [pc, #236]	; (8004fe8 <excute_phase_0+0x120>)
 8004efa:	015b      	lsls	r3, r3, #5
 8004efc:	4413      	add	r3, r2
 8004efe:	3308      	adds	r3, #8
 8004f00:	edd3 7a00 	vldr	s15, [r3]
 8004f04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0c:	d527      	bpl.n	8004f5e <excute_phase_0+0x96>
	{
		//phase = INCREASING_ACCELERATION;
		param[motors].current_acc_decel = MAX_ACC_DE_DIFFERIENT * param[motors].cnt_time;
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	4a35      	ldr	r2, [pc, #212]	; (8004fe8 <excute_phase_0+0x120>)
 8004f12:	015b      	lsls	r3, r3, #5
 8004f14:	4413      	add	r3, r2
 8004f16:	3310      	adds	r3, #16
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fb faa5 	bl	800046c <__aeabi_i2d>
 8004f22:	a32b      	add	r3, pc, #172	; (adr r3, 8004fd0 <excute_phase_0+0x108>)
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	f7fb fb0a 	bl	8000540 <__aeabi_dmul>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	79fc      	ldrb	r4, [r7, #7]
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	f7fb fdb3 	bl	8000aa0 <__aeabi_d2f>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	492a      	ldr	r1, [pc, #168]	; (8004fe8 <excute_phase_0+0x120>)
 8004f3e:	0163      	lsls	r3, r4, #5
 8004f40:	440b      	add	r3, r1
 8004f42:	331c      	adds	r3, #28
 8004f44:	601a      	str	r2, [r3, #0]
		param[motors].current_fre = 0.5 * MAX_ACC_DE_DIFFERIENT ;
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	4a27      	ldr	r2, [pc, #156]	; (8004fe8 <excute_phase_0+0x120>)
 8004f4a:	015b      	lsls	r3, r3, #5
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3318      	adds	r3, #24
 8004f50:	4a27      	ldr	r2, [pc, #156]	; (8004ff0 <excute_phase_0+0x128>)
 8004f52:	601a      	str	r2, [r3, #0]
		run_motor(motors);
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff ff38 	bl	8004dcc <run_motor>
	{
		phase[motors] = UNIFORM_ACCELERATION;
		param[motors].cnt_time = 0;
		max_fre[motors].phase_0 = 0.5 * MAX_ACC_DE_DIFFERIENT * pow(param[motors].one_phase_time,2);
	}
}
 8004f5c:	e031      	b.n	8004fc2 <excute_phase_0+0xfa>
		phase[motors] = UNIFORM_ACCELERATION;
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <excute_phase_0+0x12c>)
 8004f62:	2101      	movs	r1, #1
 8004f64:	54d1      	strb	r1, [r2, r3]
		param[motors].cnt_time = 0;
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <excute_phase_0+0x120>)
 8004f6a:	015b      	lsls	r3, r3, #5
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3310      	adds	r3, #16
 8004f70:	2200      	movs	r2, #0
 8004f72:	801a      	strh	r2, [r3, #0]
		max_fre[motors].phase_0 = 0.5 * MAX_ACC_DE_DIFFERIENT * pow(param[motors].one_phase_time,2);
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <excute_phase_0+0x120>)
 8004f78:	015b      	lsls	r3, r3, #5
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fb fa85 	bl	8000490 <__aeabi_f2d>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8004fd8 <excute_phase_0+0x110>
 8004f8e:	ec43 2b10 	vmov	d0, r2, r3
 8004f92:	f000 fd21 	bl	80059d8 <pow>
 8004f96:	ec51 0b10 	vmov	r0, r1, d0
 8004f9a:	a311      	add	r3, pc, #68	; (adr r3, 8004fe0 <excute_phase_0+0x118>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f7fb face 	bl	8000540 <__aeabi_dmul>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	79fc      	ldrb	r4, [r7, #7]
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	f7fb fd77 	bl	8000aa0 <__aeabi_d2f>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4910      	ldr	r1, [pc, #64]	; (8004ff8 <excute_phase_0+0x130>)
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	1b1b      	subs	r3, r3, r4
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	440b      	add	r3, r1
 8004fc0:	601a      	str	r2, [r3, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	f3af 8000 	nop.w
 8004fd0:	47ae147b 	.word	0x47ae147b
 8004fd4:	3f947ae1 	.word	0x3f947ae1
 8004fd8:	00000000 	.word	0x00000000
 8004fdc:	40000000 	.word	0x40000000
 8004fe0:	47ae147b 	.word	0x47ae147b
 8004fe4:	3f847ae1 	.word	0x3f847ae1
 8004fe8:	200002d8 	.word	0x200002d8
 8004fec:	3ca3d70a 	.word	0x3ca3d70a
 8004ff0:	3c23d70a 	.word	0x3c23d70a
 8004ff4:	200000ac 	.word	0x200000ac
 8004ff8:	2000033c 	.word	0x2000033c

08004ffc <excute_phase_1>:

void excute_phase_1(motors_t motors)

{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	71fb      	strb	r3, [r7, #7]
	param[motors].acc_decel_defferient = 0;
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	4a48      	ldr	r2, [pc, #288]	; (800512c <excute_phase_1+0x130>)
 800500a:	015b      	lsls	r3, r3, #5
 800500c:	4413      	add	r3, r2
 800500e:	330c      	adds	r3, #12
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
	if(param[motors].cnt_time < param[motors].one_phase_time)
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	4a44      	ldr	r2, [pc, #272]	; (800512c <excute_phase_1+0x130>)
 800501a:	015b      	lsls	r3, r3, #5
 800501c:	4413      	add	r3, r2
 800501e:	3310      	adds	r3, #16
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	4a3f      	ldr	r2, [pc, #252]	; (800512c <excute_phase_1+0x130>)
 8005030:	015b      	lsls	r3, r3, #5
 8005032:	4413      	add	r3, r2
 8005034:	3308      	adds	r3, #8
 8005036:	edd3 7a00 	vldr	s15, [r3]
 800503a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800503e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005042:	d53f      	bpl.n	80050c4 <excute_phase_1+0xc8>
	{
		//phase = INCREASING_ACCELERATION;
		param[motors].current_acc_decel = param[motors].max_acc_decel;
 8005044:	79fa      	ldrb	r2, [r7, #7]
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	4938      	ldr	r1, [pc, #224]	; (800512c <excute_phase_1+0x130>)
 800504a:	0152      	lsls	r2, r2, #5
 800504c:	440a      	add	r2, r1
 800504e:	3204      	adds	r2, #4
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	4936      	ldr	r1, [pc, #216]	; (800512c <excute_phase_1+0x130>)
 8005054:	015b      	lsls	r3, r3, #5
 8005056:	440b      	add	r3, r1
 8005058:	331c      	adds	r3, #28
 800505a:	601a      	str	r2, [r3, #0]
		param[motors].current_fre =(uint16_t) (max_fre[motors].phase_0 + param[motors].max_acc_decel * param[motors].cnt_time);
 800505c:	79fa      	ldrb	r2, [r7, #7]
 800505e:	4934      	ldr	r1, [pc, #208]	; (8005130 <excute_phase_1+0x134>)
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	ed93 7a00 	vldr	s14, [r3]
 800506e:	79fb      	ldrb	r3, [r7, #7]
 8005070:	4a2e      	ldr	r2, [pc, #184]	; (800512c <excute_phase_1+0x130>)
 8005072:	015b      	lsls	r3, r3, #5
 8005074:	4413      	add	r3, r2
 8005076:	3304      	adds	r3, #4
 8005078:	edd3 6a00 	vldr	s13, [r3]
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	4a2b      	ldr	r2, [pc, #172]	; (800512c <excute_phase_1+0x130>)
 8005080:	015b      	lsls	r3, r3, #5
 8005082:	4413      	add	r3, r2
 8005084:	3310      	adds	r3, #16
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800509a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800509e:	ee17 3a90 	vmov	r3, s15
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	ee07 2a90 	vmov	s15, r2
 80050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ae:	4a1f      	ldr	r2, [pc, #124]	; (800512c <excute_phase_1+0x130>)
 80050b0:	015b      	lsls	r3, r3, #5
 80050b2:	4413      	add	r3, r2
 80050b4:	3318      	adds	r3, #24
 80050b6:	edc3 7a00 	vstr	s15, [r3]
		run_motor(motors);
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fe85 	bl	8004dcc <run_motor>
	{
		phase[motors] = DECREASING_ACCELERATION;
		param[motors].cnt_time=0;
		max_fre[motors].phase_1 = max_fre[motors].phase_0 + param[motors].max_acc_decel * param[motors].one_phase_time;
	}
}
 80050c2:	e02f      	b.n	8005124 <excute_phase_1+0x128>
		phase[motors] = DECREASING_ACCELERATION;
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <excute_phase_1+0x138>)
 80050c8:	2102      	movs	r1, #2
 80050ca:	54d1      	strb	r1, [r2, r3]
		param[motors].cnt_time=0;
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	4a17      	ldr	r2, [pc, #92]	; (800512c <excute_phase_1+0x130>)
 80050d0:	015b      	lsls	r3, r3, #5
 80050d2:	4413      	add	r3, r2
 80050d4:	3310      	adds	r3, #16
 80050d6:	2200      	movs	r2, #0
 80050d8:	801a      	strh	r2, [r3, #0]
		max_fre[motors].phase_1 = max_fre[motors].phase_0 + param[motors].max_acc_decel * param[motors].one_phase_time;
 80050da:	79fa      	ldrb	r2, [r7, #7]
 80050dc:	4914      	ldr	r1, [pc, #80]	; (8005130 <excute_phase_1+0x134>)
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	ed93 7a00 	vldr	s14, [r3]
 80050ec:	79fb      	ldrb	r3, [r7, #7]
 80050ee:	4a0f      	ldr	r2, [pc, #60]	; (800512c <excute_phase_1+0x130>)
 80050f0:	015b      	lsls	r3, r3, #5
 80050f2:	4413      	add	r3, r2
 80050f4:	3304      	adds	r3, #4
 80050f6:	edd3 6a00 	vldr	s13, [r3]
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <excute_phase_1+0x130>)
 80050fe:	015b      	lsls	r3, r3, #5
 8005100:	4413      	add	r3, r2
 8005102:	3308      	adds	r3, #8
 8005104:	edd3 7a00 	vldr	s15, [r3]
 8005108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800510c:	79fa      	ldrb	r2, [r7, #7]
 800510e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005112:	4907      	ldr	r1, [pc, #28]	; (8005130 <excute_phase_1+0x134>)
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3304      	adds	r3, #4
 8005120:	edc3 7a00 	vstr	s15, [r3]
}
 8005124:	bf00      	nop
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	200002d8 	.word	0x200002d8
 8005130:	2000033c 	.word	0x2000033c
 8005134:	200000ac 	.word	0x200000ac

08005138 <excute_phase_2>:

void excute_phase_2(motors_t motors)
{
 8005138:	b5b0      	push	{r4, r5, r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
	param[motors].acc_decel_defferient = -MAX_ACC_DE_DIFFERIENT;
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	4a84      	ldr	r2, [pc, #528]	; (8005358 <excute_phase_2+0x220>)
 8005146:	015b      	lsls	r3, r3, #5
 8005148:	4413      	add	r3, r2
 800514a:	330c      	adds	r3, #12
 800514c:	4a83      	ldr	r2, [pc, #524]	; (800535c <excute_phase_2+0x224>)
 800514e:	601a      	str	r2, [r3, #0]
	if(param[motors].cnt_time < param[motors].one_phase_time)
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	4a81      	ldr	r2, [pc, #516]	; (8005358 <excute_phase_2+0x220>)
 8005154:	015b      	lsls	r3, r3, #5
 8005156:	4413      	add	r3, r2
 8005158:	3310      	adds	r3, #16
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	4a7b      	ldr	r2, [pc, #492]	; (8005358 <excute_phase_2+0x220>)
 800516a:	015b      	lsls	r3, r3, #5
 800516c:	4413      	add	r3, r2
 800516e:	3308      	adds	r3, #8
 8005170:	edd3 7a00 	vldr	s15, [r3]
 8005174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517c:	f140 8084 	bpl.w	8005288 <excute_phase_2+0x150>
	{
		param[motors].current_acc_decel = param[motors].max_acc_decel - param[motors].max_acc_decel * param[motors].cnt_time;
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	4a75      	ldr	r2, [pc, #468]	; (8005358 <excute_phase_2+0x220>)
 8005184:	015b      	lsls	r3, r3, #5
 8005186:	4413      	add	r3, r2
 8005188:	3304      	adds	r3, #4
 800518a:	ed93 7a00 	vldr	s14, [r3]
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	4a71      	ldr	r2, [pc, #452]	; (8005358 <excute_phase_2+0x220>)
 8005192:	015b      	lsls	r3, r3, #5
 8005194:	4413      	add	r3, r2
 8005196:	3304      	adds	r3, #4
 8005198:	edd3 6a00 	vldr	s13, [r3]
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	4a6e      	ldr	r2, [pc, #440]	; (8005358 <excute_phase_2+0x220>)
 80051a0:	015b      	lsls	r3, r3, #5
 80051a2:	4413      	add	r3, r2
 80051a4:	3310      	adds	r3, #16
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051bc:	4a66      	ldr	r2, [pc, #408]	; (8005358 <excute_phase_2+0x220>)
 80051be:	015b      	lsls	r3, r3, #5
 80051c0:	4413      	add	r3, r2
 80051c2:	331c      	adds	r3, #28
 80051c4:	edc3 7a00 	vstr	s15, [r3]
		param[motors].current_fre =(uint16_t)max_fre[motors].phase_1 + param[motors].max_acc_decel * param[motors].cnt_time - 0.5 * MAX_ACC_DE_DIFFERIENT * pow(param[motors].cnt_time,2);
 80051c8:	79fa      	ldrb	r2, [r7, #7]
 80051ca:	4965      	ldr	r1, [pc, #404]	; (8005360 <excute_phase_2+0x228>)
 80051cc:	4613      	mov	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	3304      	adds	r3, #4
 80051d8:	edd3 7a00 	vldr	s15, [r3]
 80051dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e0:	ee17 3a90 	vmov	r3, s15
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	4a59      	ldr	r2, [pc, #356]	; (8005358 <excute_phase_2+0x220>)
 80051f2:	015b      	lsls	r3, r3, #5
 80051f4:	4413      	add	r3, r2
 80051f6:	3304      	adds	r3, #4
 80051f8:	edd3 6a00 	vldr	s13, [r3]
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	4a56      	ldr	r2, [pc, #344]	; (8005358 <excute_phase_2+0x220>)
 8005200:	015b      	lsls	r3, r3, #5
 8005202:	4413      	add	r3, r2
 8005204:	3310      	adds	r3, #16
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800521a:	ee17 0a90 	vmov	r0, s15
 800521e:	f7fb f937 	bl	8000490 <__aeabi_f2d>
 8005222:	4604      	mov	r4, r0
 8005224:	460d      	mov	r5, r1
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	4a4b      	ldr	r2, [pc, #300]	; (8005358 <excute_phase_2+0x220>)
 800522a:	015b      	lsls	r3, r3, #5
 800522c:	4413      	add	r3, r2
 800522e:	3310      	adds	r3, #16
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	4618      	mov	r0, r3
 8005236:	f7fb f909 	bl	800044c <__aeabi_ui2d>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8005348 <excute_phase_2+0x210>
 8005242:	ec43 2b10 	vmov	d0, r2, r3
 8005246:	f000 fbc7 	bl	80059d8 <pow>
 800524a:	ec51 0b10 	vmov	r0, r1, d0
 800524e:	a340      	add	r3, pc, #256	; (adr r3, 8005350 <excute_phase_2+0x218>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f7fb f974 	bl	8000540 <__aeabi_dmul>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	f7fa ffb6 	bl	80001d0 <__aeabi_dsub>
 8005264:	4602      	mov	r2, r0
 8005266:	460b      	mov	r3, r1
 8005268:	79fc      	ldrb	r4, [r7, #7]
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	f7fb fc17 	bl	8000aa0 <__aeabi_d2f>
 8005272:	4602      	mov	r2, r0
 8005274:	4938      	ldr	r1, [pc, #224]	; (8005358 <excute_phase_2+0x220>)
 8005276:	0163      	lsls	r3, r4, #5
 8005278:	440b      	add	r3, r1
 800527a:	3318      	adds	r3, #24
 800527c:	601a      	str	r2, [r3, #0]
		run_motor(motors);
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fda3 	bl	8004dcc <run_motor>
	{
		phase[motors] = UNIFORM_VELOCITY;
		param[motors].cnt_time=0;
		max_fre[motors].phase_2 = max_fre[motors].phase_1 + param[motors].max_acc_decel * param[motors].one_phase_time - 0.5 * MAX_ACC_DE_DIFFERIENT * pow(param[motors].one_phase_time,2) ;
	}
}
 8005286:	e05a      	b.n	800533e <excute_phase_2+0x206>
		phase[motors] = UNIFORM_VELOCITY;
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	4a36      	ldr	r2, [pc, #216]	; (8005364 <excute_phase_2+0x22c>)
 800528c:	2103      	movs	r1, #3
 800528e:	54d1      	strb	r1, [r2, r3]
		param[motors].cnt_time=0;
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	4a31      	ldr	r2, [pc, #196]	; (8005358 <excute_phase_2+0x220>)
 8005294:	015b      	lsls	r3, r3, #5
 8005296:	4413      	add	r3, r2
 8005298:	3310      	adds	r3, #16
 800529a:	2200      	movs	r2, #0
 800529c:	801a      	strh	r2, [r3, #0]
		max_fre[motors].phase_2 = max_fre[motors].phase_1 + param[motors].max_acc_decel * param[motors].one_phase_time - 0.5 * MAX_ACC_DE_DIFFERIENT * pow(param[motors].one_phase_time,2) ;
 800529e:	79fa      	ldrb	r2, [r7, #7]
 80052a0:	492f      	ldr	r1, [pc, #188]	; (8005360 <excute_phase_2+0x228>)
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	3304      	adds	r3, #4
 80052ae:	ed93 7a00 	vldr	s14, [r3]
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	4a28      	ldr	r2, [pc, #160]	; (8005358 <excute_phase_2+0x220>)
 80052b6:	015b      	lsls	r3, r3, #5
 80052b8:	4413      	add	r3, r2
 80052ba:	3304      	adds	r3, #4
 80052bc:	edd3 6a00 	vldr	s13, [r3]
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	4a25      	ldr	r2, [pc, #148]	; (8005358 <excute_phase_2+0x220>)
 80052c4:	015b      	lsls	r3, r3, #5
 80052c6:	4413      	add	r3, r2
 80052c8:	3308      	adds	r3, #8
 80052ca:	edd3 7a00 	vldr	s15, [r3]
 80052ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052d6:	ee17 0a90 	vmov	r0, s15
 80052da:	f7fb f8d9 	bl	8000490 <__aeabi_f2d>
 80052de:	4604      	mov	r4, r0
 80052e0:	460d      	mov	r5, r1
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <excute_phase_2+0x220>)
 80052e6:	015b      	lsls	r3, r3, #5
 80052e8:	4413      	add	r3, r2
 80052ea:	3308      	adds	r3, #8
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fb f8ce 	bl	8000490 <__aeabi_f2d>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8005348 <excute_phase_2+0x210>
 80052fc:	ec43 2b10 	vmov	d0, r2, r3
 8005300:	f000 fb6a 	bl	80059d8 <pow>
 8005304:	ec51 0b10 	vmov	r0, r1, d0
 8005308:	a311      	add	r3, pc, #68	; (adr r3, 8005350 <excute_phase_2+0x218>)
 800530a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530e:	f7fb f917 	bl	8000540 <__aeabi_dmul>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f7fa ff59 	bl	80001d0 <__aeabi_dsub>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	79fc      	ldrb	r4, [r7, #7]
 8005324:	4610      	mov	r0, r2
 8005326:	4619      	mov	r1, r3
 8005328:	f7fb fbba 	bl	8000aa0 <__aeabi_d2f>
 800532c:	4602      	mov	r2, r0
 800532e:	490c      	ldr	r1, [pc, #48]	; (8005360 <excute_phase_2+0x228>)
 8005330:	4623      	mov	r3, r4
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	1b1b      	subs	r3, r3, r4
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	3308      	adds	r3, #8
 800533c:	601a      	str	r2, [r3, #0]
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bdb0      	pop	{r4, r5, r7, pc}
 8005346:	bf00      	nop
 8005348:	00000000 	.word	0x00000000
 800534c:	40000000 	.word	0x40000000
 8005350:	47ae147b 	.word	0x47ae147b
 8005354:	3f847ae1 	.word	0x3f847ae1
 8005358:	200002d8 	.word	0x200002d8
 800535c:	bca3d70a 	.word	0xbca3d70a
 8005360:	2000033c 	.word	0x2000033c
 8005364:	200000ac 	.word	0x200000ac

08005368 <excute_phase_3>:

void excute_phase_3(motors_t motors)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
	param[motors].acc_decel_defferient = 0;
 8005372:	79fb      	ldrb	r3, [r7, #7]
 8005374:	4a2c      	ldr	r2, [pc, #176]	; (8005428 <excute_phase_3+0xc0>)
 8005376:	015b      	lsls	r3, r3, #5
 8005378:	4413      	add	r3, r2
 800537a:	330c      	adds	r3, #12
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
	if(param[motors].cnt_time < 0xffff)
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	4a28      	ldr	r2, [pc, #160]	; (8005428 <excute_phase_3+0xc0>)
 8005386:	015b      	lsls	r3, r3, #5
 8005388:	4413      	add	r3, r2
 800538a:	3310      	adds	r3, #16
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005394:	4293      	cmp	r3, r2
 8005396:	d026      	beq.n	80053e6 <excute_phase_3+0x7e>
	{
		param[motors].current_acc_decel = 0;
 8005398:	79fb      	ldrb	r3, [r7, #7]
 800539a:	4a23      	ldr	r2, [pc, #140]	; (8005428 <excute_phase_3+0xc0>)
 800539c:	015b      	lsls	r3, r3, #5
 800539e:	4413      	add	r3, r2
 80053a0:	331c      	adds	r3, #28
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
		param[motors].current_fre =(uint16_t) max_fre[motors].phase_2;
 80053a8:	79fa      	ldrb	r2, [r7, #7]
 80053aa:	4920      	ldr	r1, [pc, #128]	; (800542c <excute_phase_3+0xc4>)
 80053ac:	4613      	mov	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	3308      	adds	r3, #8
 80053b8:	edd3 7a00 	vldr	s15, [r3]
 80053bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c0:	ee17 3a90 	vmov	r3, s15
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	ee07 2a90 	vmov	s15, r2
 80053cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d0:	4a15      	ldr	r2, [pc, #84]	; (8005428 <excute_phase_3+0xc0>)
 80053d2:	015b      	lsls	r3, r3, #5
 80053d4:	4413      	add	r3, r2
 80053d6:	3318      	adds	r3, #24
 80053d8:	edc3 7a00 	vstr	s15, [r3]
		run_motor(motors);
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7ff fcf4 	bl	8004dcc <run_motor>
	{
		phase[motors] = INCREASING_DECELERATION;
		param[motors].cnt_time = 0;
		max_fre[motors].phase_3 = max_fre[motors].phase_2;
	}
}
 80053e4:	e01c      	b.n	8005420 <excute_phase_3+0xb8>
		phase[motors] = INCREASING_DECELERATION;
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	4a11      	ldr	r2, [pc, #68]	; (8005430 <excute_phase_3+0xc8>)
 80053ea:	2104      	movs	r1, #4
 80053ec:	54d1      	strb	r1, [r2, r3]
		param[motors].cnt_time = 0;
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	4a0d      	ldr	r2, [pc, #52]	; (8005428 <excute_phase_3+0xc0>)
 80053f2:	015b      	lsls	r3, r3, #5
 80053f4:	4413      	add	r3, r2
 80053f6:	3310      	adds	r3, #16
 80053f8:	2200      	movs	r2, #0
 80053fa:	801a      	strh	r2, [r3, #0]
		max_fre[motors].phase_3 = max_fre[motors].phase_2;
 80053fc:	79f9      	ldrb	r1, [r7, #7]
 80053fe:	79fa      	ldrb	r2, [r7, #7]
 8005400:	480a      	ldr	r0, [pc, #40]	; (800542c <excute_phase_3+0xc4>)
 8005402:	460b      	mov	r3, r1
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	1a5b      	subs	r3, r3, r1
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4403      	add	r3, r0
 800540c:	3308      	adds	r3, #8
 800540e:	6819      	ldr	r1, [r3, #0]
 8005410:	4806      	ldr	r0, [pc, #24]	; (800542c <excute_phase_3+0xc4>)
 8005412:	4613      	mov	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4403      	add	r3, r0
 800541c:	330c      	adds	r3, #12
 800541e:	6019      	str	r1, [r3, #0]
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	200002d8 	.word	0x200002d8
 800542c:	2000033c 	.word	0x2000033c
 8005430:	200000ac 	.word	0x200000ac
 8005434:	00000000 	.word	0x00000000

08005438 <excute_phase_4>:

void excute_phase_4(motors_t motors)
{
 8005438:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	4603      	mov	r3, r0
 8005442:	71fb      	strb	r3, [r7, #7]
	param[motors].acc_decel_defferient = -MAX_ACC_DE_DIFFERIENT;
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	4a7a      	ldr	r2, [pc, #488]	; (8005630 <excute_phase_4+0x1f8>)
 8005448:	015b      	lsls	r3, r3, #5
 800544a:	4413      	add	r3, r2
 800544c:	330c      	adds	r3, #12
 800544e:	4a79      	ldr	r2, [pc, #484]	; (8005634 <excute_phase_4+0x1fc>)
 8005450:	601a      	str	r2, [r3, #0]
	if(param[motors].cnt_time < param[motors].one_phase_time)
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	4a76      	ldr	r2, [pc, #472]	; (8005630 <excute_phase_4+0x1f8>)
 8005456:	015b      	lsls	r3, r3, #5
 8005458:	4413      	add	r3, r2
 800545a:	3310      	adds	r3, #16
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	4a71      	ldr	r2, [pc, #452]	; (8005630 <excute_phase_4+0x1f8>)
 800546c:	015b      	lsls	r3, r3, #5
 800546e:	4413      	add	r3, r2
 8005470:	3308      	adds	r3, #8
 8005472:	edd3 7a00 	vldr	s15, [r3]
 8005476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547e:	d571      	bpl.n	8005564 <excute_phase_4+0x12c>
	{
		param[motors].current_acc_decel = -MAX_ACC_DE_DIFFERIENT * param[motors].cnt_time;
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	4a6b      	ldr	r2, [pc, #428]	; (8005630 <excute_phase_4+0x1f8>)
 8005484:	015b      	lsls	r3, r3, #5
 8005486:	4413      	add	r3, r2
 8005488:	3310      	adds	r3, #16
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	4618      	mov	r0, r3
 8005490:	f7fa ffec 	bl	800046c <__aeabi_i2d>
 8005494:	a362      	add	r3, pc, #392	; (adr r3, 8005620 <excute_phase_4+0x1e8>)
 8005496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549a:	f7fb f851 	bl	8000540 <__aeabi_dmul>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	79fc      	ldrb	r4, [r7, #7]
 80054a4:	4610      	mov	r0, r2
 80054a6:	4619      	mov	r1, r3
 80054a8:	f7fb fafa 	bl	8000aa0 <__aeabi_d2f>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4960      	ldr	r1, [pc, #384]	; (8005630 <excute_phase_4+0x1f8>)
 80054b0:	0163      	lsls	r3, r4, #5
 80054b2:	440b      	add	r3, r1
 80054b4:	331c      	adds	r3, #28
 80054b6:	601a      	str	r2, [r3, #0]
		param[motors].current_fre =(uint16_t)max_fre[motors].phase_3 - 0.5 * param[motors].acc_decel_defferient * pow(param[motors].cnt_time,2);
 80054b8:	79fa      	ldrb	r2, [r7, #7]
 80054ba:	495f      	ldr	r1, [pc, #380]	; (8005638 <excute_phase_4+0x200>)
 80054bc:	4613      	mov	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	330c      	adds	r3, #12
 80054c8:	edd3 7a00 	vldr	s15, [r3]
 80054cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d0:	ee17 3a90 	vmov	r3, s15
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fa ffc8 	bl	800046c <__aeabi_i2d>
 80054dc:	4604      	mov	r4, r0
 80054de:	460d      	mov	r5, r1
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	4a53      	ldr	r2, [pc, #332]	; (8005630 <excute_phase_4+0x1f8>)
 80054e4:	015b      	lsls	r3, r3, #5
 80054e6:	4413      	add	r3, r2
 80054e8:	330c      	adds	r3, #12
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fa ffcf 	bl	8000490 <__aeabi_f2d>
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	4b51      	ldr	r3, [pc, #324]	; (800563c <excute_phase_4+0x204>)
 80054f8:	f7fb f822 	bl	8000540 <__aeabi_dmul>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4690      	mov	r8, r2
 8005502:	4699      	mov	r9, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	4a4a      	ldr	r2, [pc, #296]	; (8005630 <excute_phase_4+0x1f8>)
 8005508:	015b      	lsls	r3, r3, #5
 800550a:	4413      	add	r3, r2
 800550c:	3310      	adds	r3, #16
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	4618      	mov	r0, r3
 8005514:	f7fa ff9a 	bl	800044c <__aeabi_ui2d>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8005628 <excute_phase_4+0x1f0>
 8005520:	ec43 2b10 	vmov	d0, r2, r3
 8005524:	f000 fa58 	bl	80059d8 <pow>
 8005528:	ec53 2b10 	vmov	r2, r3, d0
 800552c:	4640      	mov	r0, r8
 800552e:	4649      	mov	r1, r9
 8005530:	f7fb f806 	bl	8000540 <__aeabi_dmul>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4620      	mov	r0, r4
 800553a:	4629      	mov	r1, r5
 800553c:	f7fa fe48 	bl	80001d0 <__aeabi_dsub>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	79fc      	ldrb	r4, [r7, #7]
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	f7fb faa9 	bl	8000aa0 <__aeabi_d2f>
 800554e:	4602      	mov	r2, r0
 8005550:	4937      	ldr	r1, [pc, #220]	; (8005630 <excute_phase_4+0x1f8>)
 8005552:	0163      	lsls	r3, r4, #5
 8005554:	440b      	add	r3, r1
 8005556:	3318      	adds	r3, #24
 8005558:	601a      	str	r2, [r3, #0]
		run_motor(motors);
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff fc35 	bl	8004dcc <run_motor>
	{
		phase[motors] = UNIFORM_DECELERATION;
		param[motors].cnt_time = 0;
		max_fre[motors].phase_4 = max_fre[motors].phase_3 - 0.5 * param[motors].acc_decel_defferient * pow(param[motors].one_phase_time,2);
	}
}
 8005562:	e057      	b.n	8005614 <excute_phase_4+0x1dc>
		phase[motors] = UNIFORM_DECELERATION;
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	4a36      	ldr	r2, [pc, #216]	; (8005640 <excute_phase_4+0x208>)
 8005568:	2105      	movs	r1, #5
 800556a:	54d1      	strb	r1, [r2, r3]
		param[motors].cnt_time = 0;
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	4a30      	ldr	r2, [pc, #192]	; (8005630 <excute_phase_4+0x1f8>)
 8005570:	015b      	lsls	r3, r3, #5
 8005572:	4413      	add	r3, r2
 8005574:	3310      	adds	r3, #16
 8005576:	2200      	movs	r2, #0
 8005578:	801a      	strh	r2, [r3, #0]
		max_fre[motors].phase_4 = max_fre[motors].phase_3 - 0.5 * param[motors].acc_decel_defferient * pow(param[motors].one_phase_time,2);
 800557a:	79fa      	ldrb	r2, [r7, #7]
 800557c:	492e      	ldr	r1, [pc, #184]	; (8005638 <excute_phase_4+0x200>)
 800557e:	4613      	mov	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	330c      	adds	r3, #12
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f7fa ff7f 	bl	8000490 <__aeabi_f2d>
 8005592:	4604      	mov	r4, r0
 8005594:	460d      	mov	r5, r1
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	4a25      	ldr	r2, [pc, #148]	; (8005630 <excute_phase_4+0x1f8>)
 800559a:	015b      	lsls	r3, r3, #5
 800559c:	4413      	add	r3, r2
 800559e:	330c      	adds	r3, #12
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fa ff74 	bl	8000490 <__aeabi_f2d>
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	4b23      	ldr	r3, [pc, #140]	; (800563c <excute_phase_4+0x204>)
 80055ae:	f7fa ffc7 	bl	8000540 <__aeabi_dmul>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4690      	mov	r8, r2
 80055b8:	4699      	mov	r9, r3
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	4a1c      	ldr	r2, [pc, #112]	; (8005630 <excute_phase_4+0x1f8>)
 80055be:	015b      	lsls	r3, r3, #5
 80055c0:	4413      	add	r3, r2
 80055c2:	3308      	adds	r3, #8
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fa ff62 	bl	8000490 <__aeabi_f2d>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8005628 <excute_phase_4+0x1f0>
 80055d4:	ec43 2b10 	vmov	d0, r2, r3
 80055d8:	f000 f9fe 	bl	80059d8 <pow>
 80055dc:	ec53 2b10 	vmov	r2, r3, d0
 80055e0:	4640      	mov	r0, r8
 80055e2:	4649      	mov	r1, r9
 80055e4:	f7fa ffac 	bl	8000540 <__aeabi_dmul>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4620      	mov	r0, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	f7fa fdee 	bl	80001d0 <__aeabi_dsub>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	79fc      	ldrb	r4, [r7, #7]
 80055fa:	4610      	mov	r0, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	f7fb fa4f 	bl	8000aa0 <__aeabi_d2f>
 8005602:	4602      	mov	r2, r0
 8005604:	490c      	ldr	r1, [pc, #48]	; (8005638 <excute_phase_4+0x200>)
 8005606:	4623      	mov	r3, r4
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	1b1b      	subs	r3, r3, r4
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3310      	adds	r3, #16
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800561e:	bf00      	nop
 8005620:	47ae147b 	.word	0x47ae147b
 8005624:	bf947ae1 	.word	0xbf947ae1
 8005628:	00000000 	.word	0x00000000
 800562c:	40000000 	.word	0x40000000
 8005630:	200002d8 	.word	0x200002d8
 8005634:	bca3d70a 	.word	0xbca3d70a
 8005638:	2000033c 	.word	0x2000033c
 800563c:	3fe00000 	.word	0x3fe00000
 8005640:	200000ac 	.word	0x200000ac

08005644 <excute_phase_5>:

void excute_phase_5(motors_t motors)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	71fb      	strb	r3, [r7, #7]
	param[motors].acc_decel_defferient = 0;
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	4a4b      	ldr	r2, [pc, #300]	; (8005780 <excute_phase_5+0x13c>)
 8005652:	015b      	lsls	r3, r3, #5
 8005654:	4413      	add	r3, r2
 8005656:	330c      	adds	r3, #12
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
	if(param[motors].cnt_time < param[motors].one_phase_time)
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	4a47      	ldr	r2, [pc, #284]	; (8005780 <excute_phase_5+0x13c>)
 8005662:	015b      	lsls	r3, r3, #5
 8005664:	4413      	add	r3, r2
 8005666:	3310      	adds	r3, #16
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	4a42      	ldr	r2, [pc, #264]	; (8005780 <excute_phase_5+0x13c>)
 8005678:	015b      	lsls	r3, r3, #5
 800567a:	4413      	add	r3, r2
 800567c:	3308      	adds	r3, #8
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568a:	d544      	bpl.n	8005716 <excute_phase_5+0xd2>
	{
		param[motors].current_acc_decel = -param[motors].max_acc_decel;
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	4a3c      	ldr	r2, [pc, #240]	; (8005780 <excute_phase_5+0x13c>)
 8005690:	015b      	lsls	r3, r3, #5
 8005692:	4413      	add	r3, r2
 8005694:	3304      	adds	r3, #4
 8005696:	edd3 7a00 	vldr	s15, [r3]
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	eef1 7a67 	vneg.f32	s15, s15
 80056a0:	4a37      	ldr	r2, [pc, #220]	; (8005780 <excute_phase_5+0x13c>)
 80056a2:	015b      	lsls	r3, r3, #5
 80056a4:	4413      	add	r3, r2
 80056a6:	331c      	adds	r3, #28
 80056a8:	edc3 7a00 	vstr	s15, [r3]
		param[motors].current_fre =(uint16_t) max_fre[motors].phase_4 - param[motors].max_acc_decel * param[motors].cnt_time;
 80056ac:	79fa      	ldrb	r2, [r7, #7]
 80056ae:	4935      	ldr	r1, [pc, #212]	; (8005784 <excute_phase_5+0x140>)
 80056b0:	4613      	mov	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	1a9b      	subs	r3, r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	3310      	adds	r3, #16
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c4:	ee17 3a90 	vmov	r3, s15
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	ee07 3a90 	vmov	s15, r3
 80056ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <excute_phase_5+0x13c>)
 80056d6:	015b      	lsls	r3, r3, #5
 80056d8:	4413      	add	r3, r2
 80056da:	3304      	adds	r3, #4
 80056dc:	edd3 6a00 	vldr	s13, [r3]
 80056e0:	79fb      	ldrb	r3, [r7, #7]
 80056e2:	4a27      	ldr	r2, [pc, #156]	; (8005780 <excute_phase_5+0x13c>)
 80056e4:	015b      	lsls	r3, r3, #5
 80056e6:	4413      	add	r3, r2
 80056e8:	3310      	adds	r3, #16
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005700:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <excute_phase_5+0x13c>)
 8005702:	015b      	lsls	r3, r3, #5
 8005704:	4413      	add	r3, r2
 8005706:	3318      	adds	r3, #24
 8005708:	edc3 7a00 	vstr	s15, [r3]
		run_motor(motors);
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fb5c 	bl	8004dcc <run_motor>
	{
		phase[motors] = DECREASING_DECELERATION;
		param[motors].cnt_time = 0;
		max_fre[motors].phase_5 = max_fre[motors].phase_4 - param[motors].max_acc_decel * param[motors].one_phase_time;
	}
}
 8005714:	e030      	b.n	8005778 <excute_phase_5+0x134>
		phase[motors] = DECREASING_DECELERATION;
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <excute_phase_5+0x144>)
 800571a:	2106      	movs	r1, #6
 800571c:	54d1      	strb	r1, [r2, r3]
		param[motors].cnt_time = 0;
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <excute_phase_5+0x13c>)
 8005722:	015b      	lsls	r3, r3, #5
 8005724:	4413      	add	r3, r2
 8005726:	3310      	adds	r3, #16
 8005728:	2200      	movs	r2, #0
 800572a:	801a      	strh	r2, [r3, #0]
		max_fre[motors].phase_5 = max_fre[motors].phase_4 - param[motors].max_acc_decel * param[motors].one_phase_time;
 800572c:	79fa      	ldrb	r2, [r7, #7]
 800572e:	4915      	ldr	r1, [pc, #84]	; (8005784 <excute_phase_5+0x140>)
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	3310      	adds	r3, #16
 800573c:	ed93 7a00 	vldr	s14, [r3]
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	4a0f      	ldr	r2, [pc, #60]	; (8005780 <excute_phase_5+0x13c>)
 8005744:	015b      	lsls	r3, r3, #5
 8005746:	4413      	add	r3, r2
 8005748:	3304      	adds	r3, #4
 800574a:	edd3 6a00 	vldr	s13, [r3]
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	4a0b      	ldr	r2, [pc, #44]	; (8005780 <excute_phase_5+0x13c>)
 8005752:	015b      	lsls	r3, r3, #5
 8005754:	4413      	add	r3, r2
 8005756:	3308      	adds	r3, #8
 8005758:	edd3 7a00 	vldr	s15, [r3]
 800575c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005760:	79fa      	ldrb	r2, [r7, #7]
 8005762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005766:	4907      	ldr	r1, [pc, #28]	; (8005784 <excute_phase_5+0x140>)
 8005768:	4613      	mov	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	3314      	adds	r3, #20
 8005774:	edc3 7a00 	vstr	s15, [r3]
}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	200002d8 	.word	0x200002d8
 8005784:	2000033c 	.word	0x2000033c
 8005788:	200000ac 	.word	0x200000ac
 800578c:	00000000 	.word	0x00000000

08005790 <excute_phase_6>:

void excute_phase_6(motors_t motors)
{
 8005790:	b5b0      	push	{r4, r5, r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	71fb      	strb	r3, [r7, #7]
	param[motors].acc_decel_defferient = MAX_ACC_DE_DIFFERIENT;
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	4a5c      	ldr	r2, [pc, #368]	; (8005910 <excute_phase_6+0x180>)
 800579e:	015b      	lsls	r3, r3, #5
 80057a0:	4413      	add	r3, r2
 80057a2:	330c      	adds	r3, #12
 80057a4:	4a5b      	ldr	r2, [pc, #364]	; (8005914 <excute_phase_6+0x184>)
 80057a6:	601a      	str	r2, [r3, #0]
	if(param[motors].cnt_time < param[motors].one_phase_time)
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	4a59      	ldr	r2, [pc, #356]	; (8005910 <excute_phase_6+0x180>)
 80057ac:	015b      	lsls	r3, r3, #5
 80057ae:	4413      	add	r3, r2
 80057b0:	3310      	adds	r3, #16
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	4a53      	ldr	r2, [pc, #332]	; (8005910 <excute_phase_6+0x180>)
 80057c2:	015b      	lsls	r3, r3, #5
 80057c4:	4413      	add	r3, r2
 80057c6:	3308      	adds	r3, #8
 80057c8:	edd3 7a00 	vldr	s15, [r3]
 80057cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d4:	f140 8084 	bpl.w	80058e0 <excute_phase_6+0x150>
	{
		param[motors].current_acc_decel = -param[motors].max_acc_decel + param[motors].max_acc_decel * param[motors].cnt_time;
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	4a4d      	ldr	r2, [pc, #308]	; (8005910 <excute_phase_6+0x180>)
 80057dc:	015b      	lsls	r3, r3, #5
 80057de:	4413      	add	r3, r2
 80057e0:	3304      	adds	r3, #4
 80057e2:	ed93 7a00 	vldr	s14, [r3]
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	4a49      	ldr	r2, [pc, #292]	; (8005910 <excute_phase_6+0x180>)
 80057ea:	015b      	lsls	r3, r3, #5
 80057ec:	4413      	add	r3, r2
 80057ee:	3310      	adds	r3, #16
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	ee07 3a90 	vmov	s15, r3
 80057f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	4a43      	ldr	r2, [pc, #268]	; (8005910 <excute_phase_6+0x180>)
 8005804:	015b      	lsls	r3, r3, #5
 8005806:	4413      	add	r3, r2
 8005808:	3304      	adds	r3, #4
 800580a:	edd3 7a00 	vldr	s15, [r3]
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005814:	4a3e      	ldr	r2, [pc, #248]	; (8005910 <excute_phase_6+0x180>)
 8005816:	015b      	lsls	r3, r3, #5
 8005818:	4413      	add	r3, r2
 800581a:	331c      	adds	r3, #28
 800581c:	edc3 7a00 	vstr	s15, [r3]
		param[motors].current_fre =(uint16_t) max_fre[motors].phase_5 - param[motors].max_acc_decel * param[motors].cnt_time + 0.5 * MAX_ACC_DE_DIFFERIENT * pow(param[motors].cnt_time,2);
 8005820:	79fa      	ldrb	r2, [r7, #7]
 8005822:	493d      	ldr	r1, [pc, #244]	; (8005918 <excute_phase_6+0x188>)
 8005824:	4613      	mov	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	3314      	adds	r3, #20
 8005830:	edd3 7a00 	vldr	s15, [r3]
 8005834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005838:	ee17 3a90 	vmov	r3, s15
 800583c:	b29b      	uxth	r3, r3
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	4a31      	ldr	r2, [pc, #196]	; (8005910 <excute_phase_6+0x180>)
 800584a:	015b      	lsls	r3, r3, #5
 800584c:	4413      	add	r3, r2
 800584e:	3304      	adds	r3, #4
 8005850:	edd3 6a00 	vldr	s13, [r3]
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	4a2e      	ldr	r2, [pc, #184]	; (8005910 <excute_phase_6+0x180>)
 8005858:	015b      	lsls	r3, r3, #5
 800585a:	4413      	add	r3, r2
 800585c:	3310      	adds	r3, #16
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800586a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800586e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005872:	ee17 0a90 	vmov	r0, s15
 8005876:	f7fa fe0b 	bl	8000490 <__aeabi_f2d>
 800587a:	4604      	mov	r4, r0
 800587c:	460d      	mov	r5, r1
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	4a23      	ldr	r2, [pc, #140]	; (8005910 <excute_phase_6+0x180>)
 8005882:	015b      	lsls	r3, r3, #5
 8005884:	4413      	add	r3, r2
 8005886:	3310      	adds	r3, #16
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	b29b      	uxth	r3, r3
 800588c:	4618      	mov	r0, r3
 800588e:	f7fa fddd 	bl	800044c <__aeabi_ui2d>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8005900 <excute_phase_6+0x170>
 800589a:	ec43 2b10 	vmov	d0, r2, r3
 800589e:	f000 f89b 	bl	80059d8 <pow>
 80058a2:	ec51 0b10 	vmov	r0, r1, d0
 80058a6:	a318      	add	r3, pc, #96	; (adr r3, 8005908 <excute_phase_6+0x178>)
 80058a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ac:	f7fa fe48 	bl	8000540 <__aeabi_dmul>
 80058b0:	4602      	mov	r2, r0
 80058b2:	460b      	mov	r3, r1
 80058b4:	4620      	mov	r0, r4
 80058b6:	4629      	mov	r1, r5
 80058b8:	f7fa fc8c 	bl	80001d4 <__adddf3>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	79fc      	ldrb	r4, [r7, #7]
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	f7fb f8eb 	bl	8000aa0 <__aeabi_d2f>
 80058ca:	4602      	mov	r2, r0
 80058cc:	4910      	ldr	r1, [pc, #64]	; (8005910 <excute_phase_6+0x180>)
 80058ce:	0163      	lsls	r3, r4, #5
 80058d0:	440b      	add	r3, r1
 80058d2:	3318      	adds	r3, #24
 80058d4:	601a      	str	r2, [r3, #0]
		run_motor(motors);
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff fa77 	bl	8004dcc <run_motor>
	{
		phase[motors] = INCREASING_ACCELERATION;
		param[motors].cnt_time = 0;

	}
}
 80058de:	e00a      	b.n	80058f6 <excute_phase_6+0x166>
		phase[motors] = INCREASING_ACCELERATION;
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	4a0e      	ldr	r2, [pc, #56]	; (800591c <excute_phase_6+0x18c>)
 80058e4:	2100      	movs	r1, #0
 80058e6:	54d1      	strb	r1, [r2, r3]
		param[motors].cnt_time = 0;
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	4a09      	ldr	r2, [pc, #36]	; (8005910 <excute_phase_6+0x180>)
 80058ec:	015b      	lsls	r3, r3, #5
 80058ee:	4413      	add	r3, r2
 80058f0:	3310      	adds	r3, #16
 80058f2:	2200      	movs	r2, #0
 80058f4:	801a      	strh	r2, [r3, #0]
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bdb0      	pop	{r4, r5, r7, pc}
 80058fe:	bf00      	nop
 8005900:	00000000 	.word	0x00000000
 8005904:	40000000 	.word	0x40000000
 8005908:	47ae147b 	.word	0x47ae147b
 800590c:	3f847ae1 	.word	0x3f847ae1
 8005910:	200002d8 	.word	0x200002d8
 8005914:	3ca3d70a 	.word	0x3ca3d70a
 8005918:	2000033c 	.word	0x2000033c
 800591c:	200000ac 	.word	0x200000ac

08005920 <HAL_TIM_PeriodElapsedCallback>:

excute_phase_t excute_phase[7] = {excute_phase_0, excute_phase_1, excute_phase_2, excute_phase_3, excute_phase_4, excute_phase_5, excute_phase_6};
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
    	//motors = MOTOR_Z;
    	//param[MOTOR_Z].cnt_time++;
    	//excute_phase[phase[MOTOR_Z]](MOTOR_Z);
    }

    if (htim->Instance == htim2.Instance)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d111      	bne.n	8005958 <HAL_TIM_PeriodElapsedCallback+0x38>
    {
    	motors = MOTOR_X;
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
    	param[MOTOR_X].cnt_time++;
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800593c:	8a1b      	ldrh	r3, [r3, #16]
 800593e:	b29b      	uxth	r3, r3
 8005940:	3301      	adds	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	4b08      	ldr	r3, [pc, #32]	; (8005968 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8005946:	821a      	strh	r2, [r3, #16]
    	excute_phase[phase[MOTOR_X]](MOTOR_X);
 8005948:	4b08      	ldr	r3, [pc, #32]	; (800596c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	4b08      	ldr	r3, [pc, #32]	; (8005970 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8005950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005954:	2000      	movs	r0, #0
 8005956:	4798      	blx	r3
    }

}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	20000188 	.word	0x20000188
 8005964:	20000338 	.word	0x20000338
 8005968:	200002d8 	.word	0x200002d8
 800596c:	200000ac 	.word	0x200000ac
 8005970:	2000000c 	.word	0x2000000c

08005974 <__errno>:
 8005974:	4b01      	ldr	r3, [pc, #4]	; (800597c <__errno+0x8>)
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000028 	.word	0x20000028

08005980 <__libc_init_array>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	4d0d      	ldr	r5, [pc, #52]	; (80059b8 <__libc_init_array+0x38>)
 8005984:	4c0d      	ldr	r4, [pc, #52]	; (80059bc <__libc_init_array+0x3c>)
 8005986:	1b64      	subs	r4, r4, r5
 8005988:	10a4      	asrs	r4, r4, #2
 800598a:	2600      	movs	r6, #0
 800598c:	42a6      	cmp	r6, r4
 800598e:	d109      	bne.n	80059a4 <__libc_init_array+0x24>
 8005990:	4d0b      	ldr	r5, [pc, #44]	; (80059c0 <__libc_init_array+0x40>)
 8005992:	4c0c      	ldr	r4, [pc, #48]	; (80059c4 <__libc_init_array+0x44>)
 8005994:	f000 fffe 	bl	8006994 <_init>
 8005998:	1b64      	subs	r4, r4, r5
 800599a:	10a4      	asrs	r4, r4, #2
 800599c:	2600      	movs	r6, #0
 800599e:	42a6      	cmp	r6, r4
 80059a0:	d105      	bne.n	80059ae <__libc_init_array+0x2e>
 80059a2:	bd70      	pop	{r4, r5, r6, pc}
 80059a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a8:	4798      	blx	r3
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7ee      	b.n	800598c <__libc_init_array+0xc>
 80059ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b2:	4798      	blx	r3
 80059b4:	3601      	adds	r6, #1
 80059b6:	e7f2      	b.n	800599e <__libc_init_array+0x1e>
 80059b8:	08006a20 	.word	0x08006a20
 80059bc:	08006a20 	.word	0x08006a20
 80059c0:	08006a20 	.word	0x08006a20
 80059c4:	08006a24 	.word	0x08006a24

080059c8 <memset>:
 80059c8:	4402      	add	r2, r0
 80059ca:	4603      	mov	r3, r0
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d100      	bne.n	80059d2 <memset+0xa>
 80059d0:	4770      	bx	lr
 80059d2:	f803 1b01 	strb.w	r1, [r3], #1
 80059d6:	e7f9      	b.n	80059cc <memset+0x4>

080059d8 <pow>:
 80059d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059dc:	ec59 8b10 	vmov	r8, r9, d0
 80059e0:	ec57 6b11 	vmov	r6, r7, d1
 80059e4:	f000 f8cc 	bl	8005b80 <__ieee754_pow>
 80059e8:	4b4e      	ldr	r3, [pc, #312]	; (8005b24 <pow+0x14c>)
 80059ea:	f993 3000 	ldrsb.w	r3, [r3]
 80059ee:	3301      	adds	r3, #1
 80059f0:	ec55 4b10 	vmov	r4, r5, d0
 80059f4:	d015      	beq.n	8005a22 <pow+0x4a>
 80059f6:	4632      	mov	r2, r6
 80059f8:	463b      	mov	r3, r7
 80059fa:	4630      	mov	r0, r6
 80059fc:	4639      	mov	r1, r7
 80059fe:	f7fb f839 	bl	8000a74 <__aeabi_dcmpun>
 8005a02:	b970      	cbnz	r0, 8005a22 <pow+0x4a>
 8005a04:	4642      	mov	r2, r8
 8005a06:	464b      	mov	r3, r9
 8005a08:	4640      	mov	r0, r8
 8005a0a:	4649      	mov	r1, r9
 8005a0c:	f7fb f832 	bl	8000a74 <__aeabi_dcmpun>
 8005a10:	2200      	movs	r2, #0
 8005a12:	2300      	movs	r3, #0
 8005a14:	b148      	cbz	r0, 8005a2a <pow+0x52>
 8005a16:	4630      	mov	r0, r6
 8005a18:	4639      	mov	r1, r7
 8005a1a:	f7fa fff9 	bl	8000a10 <__aeabi_dcmpeq>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d17d      	bne.n	8005b1e <pow+0x146>
 8005a22:	ec45 4b10 	vmov	d0, r4, r5
 8005a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	f7fa ffef 	bl	8000a10 <__aeabi_dcmpeq>
 8005a32:	b1e0      	cbz	r0, 8005a6e <pow+0x96>
 8005a34:	2200      	movs	r2, #0
 8005a36:	2300      	movs	r3, #0
 8005a38:	4630      	mov	r0, r6
 8005a3a:	4639      	mov	r1, r7
 8005a3c:	f7fa ffe8 	bl	8000a10 <__aeabi_dcmpeq>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d16c      	bne.n	8005b1e <pow+0x146>
 8005a44:	ec47 6b10 	vmov	d0, r6, r7
 8005a48:	f000 fe7c 	bl	8006744 <finite>
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	d0e8      	beq.n	8005a22 <pow+0x4a>
 8005a50:	2200      	movs	r2, #0
 8005a52:	2300      	movs	r3, #0
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	f7fa ffe4 	bl	8000a24 <__aeabi_dcmplt>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d0e0      	beq.n	8005a22 <pow+0x4a>
 8005a60:	f7ff ff88 	bl	8005974 <__errno>
 8005a64:	2321      	movs	r3, #33	; 0x21
 8005a66:	6003      	str	r3, [r0, #0]
 8005a68:	2400      	movs	r4, #0
 8005a6a:	4d2f      	ldr	r5, [pc, #188]	; (8005b28 <pow+0x150>)
 8005a6c:	e7d9      	b.n	8005a22 <pow+0x4a>
 8005a6e:	ec45 4b10 	vmov	d0, r4, r5
 8005a72:	f000 fe67 	bl	8006744 <finite>
 8005a76:	bbb8      	cbnz	r0, 8005ae8 <pow+0x110>
 8005a78:	ec49 8b10 	vmov	d0, r8, r9
 8005a7c:	f000 fe62 	bl	8006744 <finite>
 8005a80:	b390      	cbz	r0, 8005ae8 <pow+0x110>
 8005a82:	ec47 6b10 	vmov	d0, r6, r7
 8005a86:	f000 fe5d 	bl	8006744 <finite>
 8005a8a:	b368      	cbz	r0, 8005ae8 <pow+0x110>
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	462b      	mov	r3, r5
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7fa ffee 	bl	8000a74 <__aeabi_dcmpun>
 8005a98:	b160      	cbz	r0, 8005ab4 <pow+0xdc>
 8005a9a:	f7ff ff6b 	bl	8005974 <__errno>
 8005a9e:	2321      	movs	r3, #33	; 0x21
 8005aa0:	6003      	str	r3, [r0, #0]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	f7fa fe73 	bl	8000794 <__aeabi_ddiv>
 8005aae:	4604      	mov	r4, r0
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	e7b6      	b.n	8005a22 <pow+0x4a>
 8005ab4:	f7ff ff5e 	bl	8005974 <__errno>
 8005ab8:	2322      	movs	r3, #34	; 0x22
 8005aba:	6003      	str	r3, [r0, #0]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	f7fa ffae 	bl	8000a24 <__aeabi_dcmplt>
 8005ac8:	2400      	movs	r4, #0
 8005aca:	b158      	cbz	r0, 8005ae4 <pow+0x10c>
 8005acc:	ec47 6b10 	vmov	d0, r6, r7
 8005ad0:	f000 fe4e 	bl	8006770 <rint>
 8005ad4:	4632      	mov	r2, r6
 8005ad6:	ec51 0b10 	vmov	r0, r1, d0
 8005ada:	463b      	mov	r3, r7
 8005adc:	f7fa ff98 	bl	8000a10 <__aeabi_dcmpeq>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d0c2      	beq.n	8005a6a <pow+0x92>
 8005ae4:	4d11      	ldr	r5, [pc, #68]	; (8005b2c <pow+0x154>)
 8005ae6:	e79c      	b.n	8005a22 <pow+0x4a>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2300      	movs	r3, #0
 8005aec:	4620      	mov	r0, r4
 8005aee:	4629      	mov	r1, r5
 8005af0:	f7fa ff8e 	bl	8000a10 <__aeabi_dcmpeq>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d094      	beq.n	8005a22 <pow+0x4a>
 8005af8:	ec49 8b10 	vmov	d0, r8, r9
 8005afc:	f000 fe22 	bl	8006744 <finite>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d08e      	beq.n	8005a22 <pow+0x4a>
 8005b04:	ec47 6b10 	vmov	d0, r6, r7
 8005b08:	f000 fe1c 	bl	8006744 <finite>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d088      	beq.n	8005a22 <pow+0x4a>
 8005b10:	f7ff ff30 	bl	8005974 <__errno>
 8005b14:	2322      	movs	r3, #34	; 0x22
 8005b16:	6003      	str	r3, [r0, #0]
 8005b18:	2400      	movs	r4, #0
 8005b1a:	2500      	movs	r5, #0
 8005b1c:	e781      	b.n	8005a22 <pow+0x4a>
 8005b1e:	4d04      	ldr	r5, [pc, #16]	; (8005b30 <pow+0x158>)
 8005b20:	2400      	movs	r4, #0
 8005b22:	e77e      	b.n	8005a22 <pow+0x4a>
 8005b24:	2000008c 	.word	0x2000008c
 8005b28:	fff00000 	.word	0xfff00000
 8005b2c:	7ff00000 	.word	0x7ff00000
 8005b30:	3ff00000 	.word	0x3ff00000

08005b34 <sqrtf>:
 8005b34:	b508      	push	{r3, lr}
 8005b36:	ed2d 8b02 	vpush	{d8}
 8005b3a:	eeb0 8a40 	vmov.f32	s16, s0
 8005b3e:	f000 fdf5 	bl	800672c <__ieee754_sqrtf>
 8005b42:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <sqrtf+0x44>)
 8005b44:	f993 3000 	ldrsb.w	r3, [r3]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	d011      	beq.n	8005b70 <sqrtf+0x3c>
 8005b4c:	eeb4 8a48 	vcmp.f32	s16, s16
 8005b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b54:	d60c      	bvs.n	8005b70 <sqrtf+0x3c>
 8005b56:	eddf 8a09 	vldr	s17, [pc, #36]	; 8005b7c <sqrtf+0x48>
 8005b5a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b62:	d505      	bpl.n	8005b70 <sqrtf+0x3c>
 8005b64:	f7ff ff06 	bl	8005974 <__errno>
 8005b68:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005b6c:	2321      	movs	r3, #33	; 0x21
 8005b6e:	6003      	str	r3, [r0, #0]
 8005b70:	ecbd 8b02 	vpop	{d8}
 8005b74:	bd08      	pop	{r3, pc}
 8005b76:	bf00      	nop
 8005b78:	2000008c 	.word	0x2000008c
 8005b7c:	00000000 	.word	0x00000000

08005b80 <__ieee754_pow>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	ed2d 8b06 	vpush	{d8-d10}
 8005b88:	b08d      	sub	sp, #52	; 0x34
 8005b8a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005b8e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005b92:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005b96:	ea56 0100 	orrs.w	r1, r6, r0
 8005b9a:	ec53 2b10 	vmov	r2, r3, d0
 8005b9e:	f000 84d1 	beq.w	8006544 <__ieee754_pow+0x9c4>
 8005ba2:	497f      	ldr	r1, [pc, #508]	; (8005da0 <__ieee754_pow+0x220>)
 8005ba4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005ba8:	428c      	cmp	r4, r1
 8005baa:	ee10 8a10 	vmov	r8, s0
 8005bae:	4699      	mov	r9, r3
 8005bb0:	dc09      	bgt.n	8005bc6 <__ieee754_pow+0x46>
 8005bb2:	d103      	bne.n	8005bbc <__ieee754_pow+0x3c>
 8005bb4:	b97a      	cbnz	r2, 8005bd6 <__ieee754_pow+0x56>
 8005bb6:	42a6      	cmp	r6, r4
 8005bb8:	dd02      	ble.n	8005bc0 <__ieee754_pow+0x40>
 8005bba:	e00c      	b.n	8005bd6 <__ieee754_pow+0x56>
 8005bbc:	428e      	cmp	r6, r1
 8005bbe:	dc02      	bgt.n	8005bc6 <__ieee754_pow+0x46>
 8005bc0:	428e      	cmp	r6, r1
 8005bc2:	d110      	bne.n	8005be6 <__ieee754_pow+0x66>
 8005bc4:	b178      	cbz	r0, 8005be6 <__ieee754_pow+0x66>
 8005bc6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005bca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005bce:	ea54 0308 	orrs.w	r3, r4, r8
 8005bd2:	f000 84b7 	beq.w	8006544 <__ieee754_pow+0x9c4>
 8005bd6:	4873      	ldr	r0, [pc, #460]	; (8005da4 <__ieee754_pow+0x224>)
 8005bd8:	b00d      	add	sp, #52	; 0x34
 8005bda:	ecbd 8b06 	vpop	{d8-d10}
 8005bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be2:	f000 bdbd 	b.w	8006760 <nan>
 8005be6:	f1b9 0f00 	cmp.w	r9, #0
 8005bea:	da36      	bge.n	8005c5a <__ieee754_pow+0xda>
 8005bec:	496e      	ldr	r1, [pc, #440]	; (8005da8 <__ieee754_pow+0x228>)
 8005bee:	428e      	cmp	r6, r1
 8005bf0:	dc51      	bgt.n	8005c96 <__ieee754_pow+0x116>
 8005bf2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8005bf6:	428e      	cmp	r6, r1
 8005bf8:	f340 84af 	ble.w	800655a <__ieee754_pow+0x9da>
 8005bfc:	1531      	asrs	r1, r6, #20
 8005bfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005c02:	2914      	cmp	r1, #20
 8005c04:	dd0f      	ble.n	8005c26 <__ieee754_pow+0xa6>
 8005c06:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8005c0a:	fa20 fc01 	lsr.w	ip, r0, r1
 8005c0e:	fa0c f101 	lsl.w	r1, ip, r1
 8005c12:	4281      	cmp	r1, r0
 8005c14:	f040 84a1 	bne.w	800655a <__ieee754_pow+0x9da>
 8005c18:	f00c 0c01 	and.w	ip, ip, #1
 8005c1c:	f1cc 0102 	rsb	r1, ip, #2
 8005c20:	9100      	str	r1, [sp, #0]
 8005c22:	b180      	cbz	r0, 8005c46 <__ieee754_pow+0xc6>
 8005c24:	e059      	b.n	8005cda <__ieee754_pow+0x15a>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d155      	bne.n	8005cd6 <__ieee754_pow+0x156>
 8005c2a:	f1c1 0114 	rsb	r1, r1, #20
 8005c2e:	fa46 fc01 	asr.w	ip, r6, r1
 8005c32:	fa0c f101 	lsl.w	r1, ip, r1
 8005c36:	42b1      	cmp	r1, r6
 8005c38:	f040 848c 	bne.w	8006554 <__ieee754_pow+0x9d4>
 8005c3c:	f00c 0c01 	and.w	ip, ip, #1
 8005c40:	f1cc 0102 	rsb	r1, ip, #2
 8005c44:	9100      	str	r1, [sp, #0]
 8005c46:	4959      	ldr	r1, [pc, #356]	; (8005dac <__ieee754_pow+0x22c>)
 8005c48:	428e      	cmp	r6, r1
 8005c4a:	d12d      	bne.n	8005ca8 <__ieee754_pow+0x128>
 8005c4c:	2f00      	cmp	r7, #0
 8005c4e:	da79      	bge.n	8005d44 <__ieee754_pow+0x1c4>
 8005c50:	4956      	ldr	r1, [pc, #344]	; (8005dac <__ieee754_pow+0x22c>)
 8005c52:	2000      	movs	r0, #0
 8005c54:	f7fa fd9e 	bl	8000794 <__aeabi_ddiv>
 8005c58:	e016      	b.n	8005c88 <__ieee754_pow+0x108>
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	9100      	str	r1, [sp, #0]
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d13b      	bne.n	8005cda <__ieee754_pow+0x15a>
 8005c62:	494f      	ldr	r1, [pc, #316]	; (8005da0 <__ieee754_pow+0x220>)
 8005c64:	428e      	cmp	r6, r1
 8005c66:	d1ee      	bne.n	8005c46 <__ieee754_pow+0xc6>
 8005c68:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005c6c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005c70:	ea53 0308 	orrs.w	r3, r3, r8
 8005c74:	f000 8466 	beq.w	8006544 <__ieee754_pow+0x9c4>
 8005c78:	4b4d      	ldr	r3, [pc, #308]	; (8005db0 <__ieee754_pow+0x230>)
 8005c7a:	429c      	cmp	r4, r3
 8005c7c:	dd0d      	ble.n	8005c9a <__ieee754_pow+0x11a>
 8005c7e:	2f00      	cmp	r7, #0
 8005c80:	f280 8464 	bge.w	800654c <__ieee754_pow+0x9cc>
 8005c84:	2000      	movs	r0, #0
 8005c86:	2100      	movs	r1, #0
 8005c88:	ec41 0b10 	vmov	d0, r0, r1
 8005c8c:	b00d      	add	sp, #52	; 0x34
 8005c8e:	ecbd 8b06 	vpop	{d8-d10}
 8005c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c96:	2102      	movs	r1, #2
 8005c98:	e7e0      	b.n	8005c5c <__ieee754_pow+0xdc>
 8005c9a:	2f00      	cmp	r7, #0
 8005c9c:	daf2      	bge.n	8005c84 <__ieee754_pow+0x104>
 8005c9e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005ca2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005ca6:	e7ef      	b.n	8005c88 <__ieee754_pow+0x108>
 8005ca8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005cac:	d104      	bne.n	8005cb8 <__ieee754_pow+0x138>
 8005cae:	4610      	mov	r0, r2
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	f7fa fc45 	bl	8000540 <__aeabi_dmul>
 8005cb6:	e7e7      	b.n	8005c88 <__ieee754_pow+0x108>
 8005cb8:	493e      	ldr	r1, [pc, #248]	; (8005db4 <__ieee754_pow+0x234>)
 8005cba:	428f      	cmp	r7, r1
 8005cbc:	d10d      	bne.n	8005cda <__ieee754_pow+0x15a>
 8005cbe:	f1b9 0f00 	cmp.w	r9, #0
 8005cc2:	db0a      	blt.n	8005cda <__ieee754_pow+0x15a>
 8005cc4:	ec43 2b10 	vmov	d0, r2, r3
 8005cc8:	b00d      	add	sp, #52	; 0x34
 8005cca:	ecbd 8b06 	vpop	{d8-d10}
 8005cce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd2:	f000 bc77 	b.w	80065c4 <__ieee754_sqrt>
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	9100      	str	r1, [sp, #0]
 8005cda:	ec43 2b10 	vmov	d0, r2, r3
 8005cde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ce2:	f000 fd26 	bl	8006732 <fabs>
 8005ce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cea:	ec51 0b10 	vmov	r0, r1, d0
 8005cee:	f1b8 0f00 	cmp.w	r8, #0
 8005cf2:	d12a      	bne.n	8005d4a <__ieee754_pow+0x1ca>
 8005cf4:	b12c      	cbz	r4, 8005d02 <__ieee754_pow+0x182>
 8005cf6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8005dac <__ieee754_pow+0x22c>
 8005cfa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8005cfe:	45e6      	cmp	lr, ip
 8005d00:	d123      	bne.n	8005d4a <__ieee754_pow+0x1ca>
 8005d02:	2f00      	cmp	r7, #0
 8005d04:	da05      	bge.n	8005d12 <__ieee754_pow+0x192>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	4927      	ldr	r1, [pc, #156]	; (8005dac <__ieee754_pow+0x22c>)
 8005d0e:	f7fa fd41 	bl	8000794 <__aeabi_ddiv>
 8005d12:	f1b9 0f00 	cmp.w	r9, #0
 8005d16:	dab7      	bge.n	8005c88 <__ieee754_pow+0x108>
 8005d18:	9b00      	ldr	r3, [sp, #0]
 8005d1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d22:	4323      	orrs	r3, r4
 8005d24:	d108      	bne.n	8005d38 <__ieee754_pow+0x1b8>
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	f7fa fa4f 	bl	80001d0 <__aeabi_dsub>
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	e78d      	b.n	8005c54 <__ieee754_pow+0xd4>
 8005d38:	9b00      	ldr	r3, [sp, #0]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d1a4      	bne.n	8005c88 <__ieee754_pow+0x108>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	e79e      	b.n	8005c88 <__ieee754_pow+0x108>
 8005d4a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8005d4e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8005d52:	950a      	str	r5, [sp, #40]	; 0x28
 8005d54:	9d00      	ldr	r5, [sp, #0]
 8005d56:	46ac      	mov	ip, r5
 8005d58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005d5a:	ea5c 0505 	orrs.w	r5, ip, r5
 8005d5e:	d0e4      	beq.n	8005d2a <__ieee754_pow+0x1aa>
 8005d60:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <__ieee754_pow+0x238>)
 8005d62:	429e      	cmp	r6, r3
 8005d64:	f340 80fc 	ble.w	8005f60 <__ieee754_pow+0x3e0>
 8005d68:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005d6c:	429e      	cmp	r6, r3
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <__ieee754_pow+0x230>)
 8005d70:	dd07      	ble.n	8005d82 <__ieee754_pow+0x202>
 8005d72:	429c      	cmp	r4, r3
 8005d74:	dc0a      	bgt.n	8005d8c <__ieee754_pow+0x20c>
 8005d76:	2f00      	cmp	r7, #0
 8005d78:	da84      	bge.n	8005c84 <__ieee754_pow+0x104>
 8005d7a:	a307      	add	r3, pc, #28	; (adr r3, 8005d98 <__ieee754_pow+0x218>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	e795      	b.n	8005cae <__ieee754_pow+0x12e>
 8005d82:	429c      	cmp	r4, r3
 8005d84:	dbf7      	blt.n	8005d76 <__ieee754_pow+0x1f6>
 8005d86:	4b09      	ldr	r3, [pc, #36]	; (8005dac <__ieee754_pow+0x22c>)
 8005d88:	429c      	cmp	r4, r3
 8005d8a:	dd17      	ble.n	8005dbc <__ieee754_pow+0x23c>
 8005d8c:	2f00      	cmp	r7, #0
 8005d8e:	dcf4      	bgt.n	8005d7a <__ieee754_pow+0x1fa>
 8005d90:	e778      	b.n	8005c84 <__ieee754_pow+0x104>
 8005d92:	bf00      	nop
 8005d94:	f3af 8000 	nop.w
 8005d98:	8800759c 	.word	0x8800759c
 8005d9c:	7e37e43c 	.word	0x7e37e43c
 8005da0:	7ff00000 	.word	0x7ff00000
 8005da4:	080069d0 	.word	0x080069d0
 8005da8:	433fffff 	.word	0x433fffff
 8005dac:	3ff00000 	.word	0x3ff00000
 8005db0:	3fefffff 	.word	0x3fefffff
 8005db4:	3fe00000 	.word	0x3fe00000
 8005db8:	41e00000 	.word	0x41e00000
 8005dbc:	4b64      	ldr	r3, [pc, #400]	; (8005f50 <__ieee754_pow+0x3d0>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f7fa fa06 	bl	80001d0 <__aeabi_dsub>
 8005dc4:	a356      	add	r3, pc, #344	; (adr r3, 8005f20 <__ieee754_pow+0x3a0>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	4604      	mov	r4, r0
 8005dcc:	460d      	mov	r5, r1
 8005dce:	f7fa fbb7 	bl	8000540 <__aeabi_dmul>
 8005dd2:	a355      	add	r3, pc, #340	; (adr r3, 8005f28 <__ieee754_pow+0x3a8>)
 8005dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd8:	4606      	mov	r6, r0
 8005dda:	460f      	mov	r7, r1
 8005ddc:	4620      	mov	r0, r4
 8005dde:	4629      	mov	r1, r5
 8005de0:	f7fa fbae 	bl	8000540 <__aeabi_dmul>
 8005de4:	4b5b      	ldr	r3, [pc, #364]	; (8005f54 <__ieee754_pow+0x3d4>)
 8005de6:	4682      	mov	sl, r0
 8005de8:	468b      	mov	fp, r1
 8005dea:	2200      	movs	r2, #0
 8005dec:	4620      	mov	r0, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	f7fa fba6 	bl	8000540 <__aeabi_dmul>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	a14d      	add	r1, pc, #308	; (adr r1, 8005f30 <__ieee754_pow+0x3b0>)
 8005dfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dfe:	f7fa f9e7 	bl	80001d0 <__aeabi_dsub>
 8005e02:	4622      	mov	r2, r4
 8005e04:	462b      	mov	r3, r5
 8005e06:	f7fa fb9b 	bl	8000540 <__aeabi_dmul>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	2000      	movs	r0, #0
 8005e10:	4951      	ldr	r1, [pc, #324]	; (8005f58 <__ieee754_pow+0x3d8>)
 8005e12:	f7fa f9dd 	bl	80001d0 <__aeabi_dsub>
 8005e16:	4622      	mov	r2, r4
 8005e18:	4680      	mov	r8, r0
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	462b      	mov	r3, r5
 8005e1e:	4620      	mov	r0, r4
 8005e20:	4629      	mov	r1, r5
 8005e22:	f7fa fb8d 	bl	8000540 <__aeabi_dmul>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	f7fa fb87 	bl	8000540 <__aeabi_dmul>
 8005e32:	a341      	add	r3, pc, #260	; (adr r3, 8005f38 <__ieee754_pow+0x3b8>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa fb82 	bl	8000540 <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4650      	mov	r0, sl
 8005e42:	4659      	mov	r1, fp
 8005e44:	f7fa f9c4 	bl	80001d0 <__aeabi_dsub>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4680      	mov	r8, r0
 8005e4e:	4689      	mov	r9, r1
 8005e50:	4630      	mov	r0, r6
 8005e52:	4639      	mov	r1, r7
 8005e54:	f7fa f9be 	bl	80001d4 <__adddf3>
 8005e58:	2400      	movs	r4, #0
 8005e5a:	4632      	mov	r2, r6
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	4620      	mov	r0, r4
 8005e60:	460d      	mov	r5, r1
 8005e62:	f7fa f9b5 	bl	80001d0 <__aeabi_dsub>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	f7fa f9af 	bl	80001d0 <__aeabi_dsub>
 8005e72:	9b00      	ldr	r3, [sp, #0]
 8005e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	4682      	mov	sl, r0
 8005e7c:	468b      	mov	fp, r1
 8005e7e:	f040 81f1 	bne.w	8006264 <__ieee754_pow+0x6e4>
 8005e82:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005f40 <__ieee754_pow+0x3c0>
 8005e86:	eeb0 8a47 	vmov.f32	s16, s14
 8005e8a:	eef0 8a67 	vmov.f32	s17, s15
 8005e8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e92:	2600      	movs	r6, #0
 8005e94:	4632      	mov	r2, r6
 8005e96:	463b      	mov	r3, r7
 8005e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e9c:	f7fa f998 	bl	80001d0 <__aeabi_dsub>
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	f7fa fb4c 	bl	8000540 <__aeabi_dmul>
 8005ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eac:	4680      	mov	r8, r0
 8005eae:	4689      	mov	r9, r1
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	f7fa fb44 	bl	8000540 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	f7fa f988 	bl	80001d4 <__adddf3>
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	4680      	mov	r8, r0
 8005eca:	4689      	mov	r9, r1
 8005ecc:	4620      	mov	r0, r4
 8005ece:	4629      	mov	r1, r5
 8005ed0:	f7fa fb36 	bl	8000540 <__aeabi_dmul>
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	460d      	mov	r5, r1
 8005eda:	4602      	mov	r2, r0
 8005edc:	4649      	mov	r1, r9
 8005ede:	4640      	mov	r0, r8
 8005ee0:	f7fa f978 	bl	80001d4 <__adddf3>
 8005ee4:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <__ieee754_pow+0x3dc>)
 8005ee6:	4299      	cmp	r1, r3
 8005ee8:	ec45 4b19 	vmov	d9, r4, r5
 8005eec:	4606      	mov	r6, r0
 8005eee:	460f      	mov	r7, r1
 8005ef0:	468b      	mov	fp, r1
 8005ef2:	f340 82fe 	ble.w	80064f2 <__ieee754_pow+0x972>
 8005ef6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005efa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005efe:	4303      	orrs	r3, r0
 8005f00:	f000 81f0 	beq.w	80062e4 <__ieee754_pow+0x764>
 8005f04:	a310      	add	r3, pc, #64	; (adr r3, 8005f48 <__ieee754_pow+0x3c8>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	ec51 0b18 	vmov	r0, r1, d8
 8005f0e:	f7fa fb17 	bl	8000540 <__aeabi_dmul>
 8005f12:	a30d      	add	r3, pc, #52	; (adr r3, 8005f48 <__ieee754_pow+0x3c8>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	e6cb      	b.n	8005cb2 <__ieee754_pow+0x132>
 8005f1a:	bf00      	nop
 8005f1c:	f3af 8000 	nop.w
 8005f20:	60000000 	.word	0x60000000
 8005f24:	3ff71547 	.word	0x3ff71547
 8005f28:	f85ddf44 	.word	0xf85ddf44
 8005f2c:	3e54ae0b 	.word	0x3e54ae0b
 8005f30:	55555555 	.word	0x55555555
 8005f34:	3fd55555 	.word	0x3fd55555
 8005f38:	652b82fe 	.word	0x652b82fe
 8005f3c:	3ff71547 	.word	0x3ff71547
 8005f40:	00000000 	.word	0x00000000
 8005f44:	bff00000 	.word	0xbff00000
 8005f48:	8800759c 	.word	0x8800759c
 8005f4c:	7e37e43c 	.word	0x7e37e43c
 8005f50:	3ff00000 	.word	0x3ff00000
 8005f54:	3fd00000 	.word	0x3fd00000
 8005f58:	3fe00000 	.word	0x3fe00000
 8005f5c:	408fffff 	.word	0x408fffff
 8005f60:	4bd7      	ldr	r3, [pc, #860]	; (80062c0 <__ieee754_pow+0x740>)
 8005f62:	ea03 0309 	and.w	r3, r3, r9
 8005f66:	2200      	movs	r2, #0
 8005f68:	b92b      	cbnz	r3, 8005f76 <__ieee754_pow+0x3f6>
 8005f6a:	4bd6      	ldr	r3, [pc, #856]	; (80062c4 <__ieee754_pow+0x744>)
 8005f6c:	f7fa fae8 	bl	8000540 <__aeabi_dmul>
 8005f70:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005f74:	460c      	mov	r4, r1
 8005f76:	1523      	asrs	r3, r4, #20
 8005f78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f7c:	4413      	add	r3, r2
 8005f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f80:	4bd1      	ldr	r3, [pc, #836]	; (80062c8 <__ieee754_pow+0x748>)
 8005f82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005f86:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005f8a:	429c      	cmp	r4, r3
 8005f8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005f90:	dd08      	ble.n	8005fa4 <__ieee754_pow+0x424>
 8005f92:	4bce      	ldr	r3, [pc, #824]	; (80062cc <__ieee754_pow+0x74c>)
 8005f94:	429c      	cmp	r4, r3
 8005f96:	f340 8163 	ble.w	8006260 <__ieee754_pow+0x6e0>
 8005f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005fa4:	2400      	movs	r4, #0
 8005fa6:	00e3      	lsls	r3, r4, #3
 8005fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005faa:	4bc9      	ldr	r3, [pc, #804]	; (80062d0 <__ieee754_pow+0x750>)
 8005fac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fb0:	ed93 7b00 	vldr	d7, [r3]
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	ec53 2b17 	vmov	r2, r3, d7
 8005fba:	eeb0 8a47 	vmov.f32	s16, s14
 8005fbe:	eef0 8a67 	vmov.f32	s17, s15
 8005fc2:	4682      	mov	sl, r0
 8005fc4:	f7fa f904 	bl	80001d0 <__aeabi_dsub>
 8005fc8:	4652      	mov	r2, sl
 8005fca:	4606      	mov	r6, r0
 8005fcc:	460f      	mov	r7, r1
 8005fce:	462b      	mov	r3, r5
 8005fd0:	ec51 0b18 	vmov	r0, r1, d8
 8005fd4:	f7fa f8fe 	bl	80001d4 <__adddf3>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	2000      	movs	r0, #0
 8005fde:	49bd      	ldr	r1, [pc, #756]	; (80062d4 <__ieee754_pow+0x754>)
 8005fe0:	f7fa fbd8 	bl	8000794 <__aeabi_ddiv>
 8005fe4:	ec41 0b19 	vmov	d9, r0, r1
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4630      	mov	r0, r6
 8005fee:	4639      	mov	r1, r7
 8005ff0:	f7fa faa6 	bl	8000540 <__aeabi_dmul>
 8005ff4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ff8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ffc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006000:	2300      	movs	r3, #0
 8006002:	9304      	str	r3, [sp, #16]
 8006004:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006008:	46ab      	mov	fp, r5
 800600a:	106d      	asrs	r5, r5, #1
 800600c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006010:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006014:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006018:	2200      	movs	r2, #0
 800601a:	4640      	mov	r0, r8
 800601c:	4649      	mov	r1, r9
 800601e:	4614      	mov	r4, r2
 8006020:	461d      	mov	r5, r3
 8006022:	f7fa fa8d 	bl	8000540 <__aeabi_dmul>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa f8cf 	bl	80001d0 <__aeabi_dsub>
 8006032:	ec53 2b18 	vmov	r2, r3, d8
 8006036:	4606      	mov	r6, r0
 8006038:	460f      	mov	r7, r1
 800603a:	4620      	mov	r0, r4
 800603c:	4629      	mov	r1, r5
 800603e:	f7fa f8c7 	bl	80001d0 <__aeabi_dsub>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4650      	mov	r0, sl
 8006048:	4659      	mov	r1, fp
 800604a:	f7fa f8c1 	bl	80001d0 <__aeabi_dsub>
 800604e:	4642      	mov	r2, r8
 8006050:	464b      	mov	r3, r9
 8006052:	f7fa fa75 	bl	8000540 <__aeabi_dmul>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4630      	mov	r0, r6
 800605c:	4639      	mov	r1, r7
 800605e:	f7fa f8b7 	bl	80001d0 <__aeabi_dsub>
 8006062:	ec53 2b19 	vmov	r2, r3, d9
 8006066:	f7fa fa6b 	bl	8000540 <__aeabi_dmul>
 800606a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800606e:	ec41 0b18 	vmov	d8, r0, r1
 8006072:	4610      	mov	r0, r2
 8006074:	4619      	mov	r1, r3
 8006076:	f7fa fa63 	bl	8000540 <__aeabi_dmul>
 800607a:	a37d      	add	r3, pc, #500	; (adr r3, 8006270 <__ieee754_pow+0x6f0>)
 800607c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006080:	4604      	mov	r4, r0
 8006082:	460d      	mov	r5, r1
 8006084:	f7fa fa5c 	bl	8000540 <__aeabi_dmul>
 8006088:	a37b      	add	r3, pc, #492	; (adr r3, 8006278 <__ieee754_pow+0x6f8>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f7fa f8a1 	bl	80001d4 <__adddf3>
 8006092:	4622      	mov	r2, r4
 8006094:	462b      	mov	r3, r5
 8006096:	f7fa fa53 	bl	8000540 <__aeabi_dmul>
 800609a:	a379      	add	r3, pc, #484	; (adr r3, 8006280 <__ieee754_pow+0x700>)
 800609c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a0:	f7fa f898 	bl	80001d4 <__adddf3>
 80060a4:	4622      	mov	r2, r4
 80060a6:	462b      	mov	r3, r5
 80060a8:	f7fa fa4a 	bl	8000540 <__aeabi_dmul>
 80060ac:	a376      	add	r3, pc, #472	; (adr r3, 8006288 <__ieee754_pow+0x708>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa f88f 	bl	80001d4 <__adddf3>
 80060b6:	4622      	mov	r2, r4
 80060b8:	462b      	mov	r3, r5
 80060ba:	f7fa fa41 	bl	8000540 <__aeabi_dmul>
 80060be:	a374      	add	r3, pc, #464	; (adr r3, 8006290 <__ieee754_pow+0x710>)
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f7fa f886 	bl	80001d4 <__adddf3>
 80060c8:	4622      	mov	r2, r4
 80060ca:	462b      	mov	r3, r5
 80060cc:	f7fa fa38 	bl	8000540 <__aeabi_dmul>
 80060d0:	a371      	add	r3, pc, #452	; (adr r3, 8006298 <__ieee754_pow+0x718>)
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f7fa f87d 	bl	80001d4 <__adddf3>
 80060da:	4622      	mov	r2, r4
 80060dc:	4606      	mov	r6, r0
 80060de:	460f      	mov	r7, r1
 80060e0:	462b      	mov	r3, r5
 80060e2:	4620      	mov	r0, r4
 80060e4:	4629      	mov	r1, r5
 80060e6:	f7fa fa2b 	bl	8000540 <__aeabi_dmul>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4630      	mov	r0, r6
 80060f0:	4639      	mov	r1, r7
 80060f2:	f7fa fa25 	bl	8000540 <__aeabi_dmul>
 80060f6:	4642      	mov	r2, r8
 80060f8:	4604      	mov	r4, r0
 80060fa:	460d      	mov	r5, r1
 80060fc:	464b      	mov	r3, r9
 80060fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006102:	f7fa f867 	bl	80001d4 <__adddf3>
 8006106:	ec53 2b18 	vmov	r2, r3, d8
 800610a:	f7fa fa19 	bl	8000540 <__aeabi_dmul>
 800610e:	4622      	mov	r2, r4
 8006110:	462b      	mov	r3, r5
 8006112:	f7fa f85f 	bl	80001d4 <__adddf3>
 8006116:	4642      	mov	r2, r8
 8006118:	4682      	mov	sl, r0
 800611a:	468b      	mov	fp, r1
 800611c:	464b      	mov	r3, r9
 800611e:	4640      	mov	r0, r8
 8006120:	4649      	mov	r1, r9
 8006122:	f7fa fa0d 	bl	8000540 <__aeabi_dmul>
 8006126:	4b6c      	ldr	r3, [pc, #432]	; (80062d8 <__ieee754_pow+0x758>)
 8006128:	2200      	movs	r2, #0
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	f7fa f851 	bl	80001d4 <__adddf3>
 8006132:	4652      	mov	r2, sl
 8006134:	465b      	mov	r3, fp
 8006136:	f7fa f84d 	bl	80001d4 <__adddf3>
 800613a:	9c04      	ldr	r4, [sp, #16]
 800613c:	460d      	mov	r5, r1
 800613e:	4622      	mov	r2, r4
 8006140:	460b      	mov	r3, r1
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7fa f9fb 	bl	8000540 <__aeabi_dmul>
 800614a:	4b63      	ldr	r3, [pc, #396]	; (80062d8 <__ieee754_pow+0x758>)
 800614c:	4680      	mov	r8, r0
 800614e:	4689      	mov	r9, r1
 8006150:	2200      	movs	r2, #0
 8006152:	4620      	mov	r0, r4
 8006154:	4629      	mov	r1, r5
 8006156:	f7fa f83b 	bl	80001d0 <__aeabi_dsub>
 800615a:	4632      	mov	r2, r6
 800615c:	463b      	mov	r3, r7
 800615e:	f7fa f837 	bl	80001d0 <__aeabi_dsub>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4650      	mov	r0, sl
 8006168:	4659      	mov	r1, fp
 800616a:	f7fa f831 	bl	80001d0 <__aeabi_dsub>
 800616e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006172:	f7fa f9e5 	bl	8000540 <__aeabi_dmul>
 8006176:	4622      	mov	r2, r4
 8006178:	4606      	mov	r6, r0
 800617a:	460f      	mov	r7, r1
 800617c:	462b      	mov	r3, r5
 800617e:	ec51 0b18 	vmov	r0, r1, d8
 8006182:	f7fa f9dd 	bl	8000540 <__aeabi_dmul>
 8006186:	4602      	mov	r2, r0
 8006188:	460b      	mov	r3, r1
 800618a:	4630      	mov	r0, r6
 800618c:	4639      	mov	r1, r7
 800618e:	f7fa f821 	bl	80001d4 <__adddf3>
 8006192:	4606      	mov	r6, r0
 8006194:	460f      	mov	r7, r1
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4640      	mov	r0, r8
 800619c:	4649      	mov	r1, r9
 800619e:	f7fa f819 	bl	80001d4 <__adddf3>
 80061a2:	9c04      	ldr	r4, [sp, #16]
 80061a4:	a33e      	add	r3, pc, #248	; (adr r3, 80062a0 <__ieee754_pow+0x720>)
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	4620      	mov	r0, r4
 80061ac:	460d      	mov	r5, r1
 80061ae:	f7fa f9c7 	bl	8000540 <__aeabi_dmul>
 80061b2:	4642      	mov	r2, r8
 80061b4:	ec41 0b18 	vmov	d8, r0, r1
 80061b8:	464b      	mov	r3, r9
 80061ba:	4620      	mov	r0, r4
 80061bc:	4629      	mov	r1, r5
 80061be:	f7fa f807 	bl	80001d0 <__aeabi_dsub>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4630      	mov	r0, r6
 80061c8:	4639      	mov	r1, r7
 80061ca:	f7fa f801 	bl	80001d0 <__aeabi_dsub>
 80061ce:	a336      	add	r3, pc, #216	; (adr r3, 80062a8 <__ieee754_pow+0x728>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f7fa f9b4 	bl	8000540 <__aeabi_dmul>
 80061d8:	a335      	add	r3, pc, #212	; (adr r3, 80062b0 <__ieee754_pow+0x730>)
 80061da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061de:	4606      	mov	r6, r0
 80061e0:	460f      	mov	r7, r1
 80061e2:	4620      	mov	r0, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7fa f9ab 	bl	8000540 <__aeabi_dmul>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4630      	mov	r0, r6
 80061f0:	4639      	mov	r1, r7
 80061f2:	f7f9 ffef 	bl	80001d4 <__adddf3>
 80061f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061f8:	4b38      	ldr	r3, [pc, #224]	; (80062dc <__ieee754_pow+0x75c>)
 80061fa:	4413      	add	r3, r2
 80061fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006200:	f7f9 ffe8 	bl	80001d4 <__adddf3>
 8006204:	4682      	mov	sl, r0
 8006206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006208:	468b      	mov	fp, r1
 800620a:	f7fa f92f 	bl	800046c <__aeabi_i2d>
 800620e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006210:	4b33      	ldr	r3, [pc, #204]	; (80062e0 <__ieee754_pow+0x760>)
 8006212:	4413      	add	r3, r2
 8006214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006218:	4606      	mov	r6, r0
 800621a:	460f      	mov	r7, r1
 800621c:	4652      	mov	r2, sl
 800621e:	465b      	mov	r3, fp
 8006220:	ec51 0b18 	vmov	r0, r1, d8
 8006224:	f7f9 ffd6 	bl	80001d4 <__adddf3>
 8006228:	4642      	mov	r2, r8
 800622a:	464b      	mov	r3, r9
 800622c:	f7f9 ffd2 	bl	80001d4 <__adddf3>
 8006230:	4632      	mov	r2, r6
 8006232:	463b      	mov	r3, r7
 8006234:	f7f9 ffce 	bl	80001d4 <__adddf3>
 8006238:	9c04      	ldr	r4, [sp, #16]
 800623a:	4632      	mov	r2, r6
 800623c:	463b      	mov	r3, r7
 800623e:	4620      	mov	r0, r4
 8006240:	460d      	mov	r5, r1
 8006242:	f7f9 ffc5 	bl	80001d0 <__aeabi_dsub>
 8006246:	4642      	mov	r2, r8
 8006248:	464b      	mov	r3, r9
 800624a:	f7f9 ffc1 	bl	80001d0 <__aeabi_dsub>
 800624e:	ec53 2b18 	vmov	r2, r3, d8
 8006252:	f7f9 ffbd 	bl	80001d0 <__aeabi_dsub>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4650      	mov	r0, sl
 800625c:	4659      	mov	r1, fp
 800625e:	e606      	b.n	8005e6e <__ieee754_pow+0x2ee>
 8006260:	2401      	movs	r4, #1
 8006262:	e6a0      	b.n	8005fa6 <__ieee754_pow+0x426>
 8006264:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80062b8 <__ieee754_pow+0x738>
 8006268:	e60d      	b.n	8005e86 <__ieee754_pow+0x306>
 800626a:	bf00      	nop
 800626c:	f3af 8000 	nop.w
 8006270:	4a454eef 	.word	0x4a454eef
 8006274:	3fca7e28 	.word	0x3fca7e28
 8006278:	93c9db65 	.word	0x93c9db65
 800627c:	3fcd864a 	.word	0x3fcd864a
 8006280:	a91d4101 	.word	0xa91d4101
 8006284:	3fd17460 	.word	0x3fd17460
 8006288:	518f264d 	.word	0x518f264d
 800628c:	3fd55555 	.word	0x3fd55555
 8006290:	db6fabff 	.word	0xdb6fabff
 8006294:	3fdb6db6 	.word	0x3fdb6db6
 8006298:	33333303 	.word	0x33333303
 800629c:	3fe33333 	.word	0x3fe33333
 80062a0:	e0000000 	.word	0xe0000000
 80062a4:	3feec709 	.word	0x3feec709
 80062a8:	dc3a03fd 	.word	0xdc3a03fd
 80062ac:	3feec709 	.word	0x3feec709
 80062b0:	145b01f5 	.word	0x145b01f5
 80062b4:	be3e2fe0 	.word	0xbe3e2fe0
 80062b8:	00000000 	.word	0x00000000
 80062bc:	3ff00000 	.word	0x3ff00000
 80062c0:	7ff00000 	.word	0x7ff00000
 80062c4:	43400000 	.word	0x43400000
 80062c8:	0003988e 	.word	0x0003988e
 80062cc:	000bb679 	.word	0x000bb679
 80062d0:	080069d8 	.word	0x080069d8
 80062d4:	3ff00000 	.word	0x3ff00000
 80062d8:	40080000 	.word	0x40080000
 80062dc:	080069f8 	.word	0x080069f8
 80062e0:	080069e8 	.word	0x080069e8
 80062e4:	a3b5      	add	r3, pc, #724	; (adr r3, 80065bc <__ieee754_pow+0xa3c>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	f7f9 ff71 	bl	80001d4 <__adddf3>
 80062f2:	4622      	mov	r2, r4
 80062f4:	ec41 0b1a 	vmov	d10, r0, r1
 80062f8:	462b      	mov	r3, r5
 80062fa:	4630      	mov	r0, r6
 80062fc:	4639      	mov	r1, r7
 80062fe:	f7f9 ff67 	bl	80001d0 <__aeabi_dsub>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	ec51 0b1a 	vmov	r0, r1, d10
 800630a:	f7fa fba9 	bl	8000a60 <__aeabi_dcmpgt>
 800630e:	2800      	cmp	r0, #0
 8006310:	f47f adf8 	bne.w	8005f04 <__ieee754_pow+0x384>
 8006314:	4aa4      	ldr	r2, [pc, #656]	; (80065a8 <__ieee754_pow+0xa28>)
 8006316:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800631a:	4293      	cmp	r3, r2
 800631c:	f340 810b 	ble.w	8006536 <__ieee754_pow+0x9b6>
 8006320:	151b      	asrs	r3, r3, #20
 8006322:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006326:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800632a:	fa4a f303 	asr.w	r3, sl, r3
 800632e:	445b      	add	r3, fp
 8006330:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006334:	4e9d      	ldr	r6, [pc, #628]	; (80065ac <__ieee754_pow+0xa2c>)
 8006336:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800633a:	4116      	asrs	r6, r2
 800633c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006340:	2000      	movs	r0, #0
 8006342:	ea23 0106 	bic.w	r1, r3, r6
 8006346:	f1c2 0214 	rsb	r2, r2, #20
 800634a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800634e:	fa4a fa02 	asr.w	sl, sl, r2
 8006352:	f1bb 0f00 	cmp.w	fp, #0
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	bfb8      	it	lt
 8006360:	f1ca 0a00 	rsblt	sl, sl, #0
 8006364:	f7f9 ff34 	bl	80001d0 <__aeabi_dsub>
 8006368:	ec41 0b19 	vmov	d9, r0, r1
 800636c:	4642      	mov	r2, r8
 800636e:	464b      	mov	r3, r9
 8006370:	ec51 0b19 	vmov	r0, r1, d9
 8006374:	f7f9 ff2e 	bl	80001d4 <__adddf3>
 8006378:	2400      	movs	r4, #0
 800637a:	a379      	add	r3, pc, #484	; (adr r3, 8006560 <__ieee754_pow+0x9e0>)
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	4620      	mov	r0, r4
 8006382:	460d      	mov	r5, r1
 8006384:	f7fa f8dc 	bl	8000540 <__aeabi_dmul>
 8006388:	ec53 2b19 	vmov	r2, r3, d9
 800638c:	4606      	mov	r6, r0
 800638e:	460f      	mov	r7, r1
 8006390:	4620      	mov	r0, r4
 8006392:	4629      	mov	r1, r5
 8006394:	f7f9 ff1c 	bl	80001d0 <__aeabi_dsub>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4640      	mov	r0, r8
 800639e:	4649      	mov	r1, r9
 80063a0:	f7f9 ff16 	bl	80001d0 <__aeabi_dsub>
 80063a4:	a370      	add	r3, pc, #448	; (adr r3, 8006568 <__ieee754_pow+0x9e8>)
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f7fa f8c9 	bl	8000540 <__aeabi_dmul>
 80063ae:	a370      	add	r3, pc, #448	; (adr r3, 8006570 <__ieee754_pow+0x9f0>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	4680      	mov	r8, r0
 80063b6:	4689      	mov	r9, r1
 80063b8:	4620      	mov	r0, r4
 80063ba:	4629      	mov	r1, r5
 80063bc:	f7fa f8c0 	bl	8000540 <__aeabi_dmul>
 80063c0:	4602      	mov	r2, r0
 80063c2:	460b      	mov	r3, r1
 80063c4:	4640      	mov	r0, r8
 80063c6:	4649      	mov	r1, r9
 80063c8:	f7f9 ff04 	bl	80001d4 <__adddf3>
 80063cc:	4604      	mov	r4, r0
 80063ce:	460d      	mov	r5, r1
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4630      	mov	r0, r6
 80063d6:	4639      	mov	r1, r7
 80063d8:	f7f9 fefc 	bl	80001d4 <__adddf3>
 80063dc:	4632      	mov	r2, r6
 80063de:	463b      	mov	r3, r7
 80063e0:	4680      	mov	r8, r0
 80063e2:	4689      	mov	r9, r1
 80063e4:	f7f9 fef4 	bl	80001d0 <__aeabi_dsub>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7f9 feee 	bl	80001d0 <__aeabi_dsub>
 80063f4:	4642      	mov	r2, r8
 80063f6:	4606      	mov	r6, r0
 80063f8:	460f      	mov	r7, r1
 80063fa:	464b      	mov	r3, r9
 80063fc:	4640      	mov	r0, r8
 80063fe:	4649      	mov	r1, r9
 8006400:	f7fa f89e 	bl	8000540 <__aeabi_dmul>
 8006404:	a35c      	add	r3, pc, #368	; (adr r3, 8006578 <__ieee754_pow+0x9f8>)
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	4604      	mov	r4, r0
 800640c:	460d      	mov	r5, r1
 800640e:	f7fa f897 	bl	8000540 <__aeabi_dmul>
 8006412:	a35b      	add	r3, pc, #364	; (adr r3, 8006580 <__ieee754_pow+0xa00>)
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	f7f9 feda 	bl	80001d0 <__aeabi_dsub>
 800641c:	4622      	mov	r2, r4
 800641e:	462b      	mov	r3, r5
 8006420:	f7fa f88e 	bl	8000540 <__aeabi_dmul>
 8006424:	a358      	add	r3, pc, #352	; (adr r3, 8006588 <__ieee754_pow+0xa08>)
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f7f9 fed3 	bl	80001d4 <__adddf3>
 800642e:	4622      	mov	r2, r4
 8006430:	462b      	mov	r3, r5
 8006432:	f7fa f885 	bl	8000540 <__aeabi_dmul>
 8006436:	a356      	add	r3, pc, #344	; (adr r3, 8006590 <__ieee754_pow+0xa10>)
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f7f9 fec8 	bl	80001d0 <__aeabi_dsub>
 8006440:	4622      	mov	r2, r4
 8006442:	462b      	mov	r3, r5
 8006444:	f7fa f87c 	bl	8000540 <__aeabi_dmul>
 8006448:	a353      	add	r3, pc, #332	; (adr r3, 8006598 <__ieee754_pow+0xa18>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f7f9 fec1 	bl	80001d4 <__adddf3>
 8006452:	4622      	mov	r2, r4
 8006454:	462b      	mov	r3, r5
 8006456:	f7fa f873 	bl	8000540 <__aeabi_dmul>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4640      	mov	r0, r8
 8006460:	4649      	mov	r1, r9
 8006462:	f7f9 feb5 	bl	80001d0 <__aeabi_dsub>
 8006466:	4604      	mov	r4, r0
 8006468:	460d      	mov	r5, r1
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4640      	mov	r0, r8
 8006470:	4649      	mov	r1, r9
 8006472:	f7fa f865 	bl	8000540 <__aeabi_dmul>
 8006476:	2200      	movs	r2, #0
 8006478:	ec41 0b19 	vmov	d9, r0, r1
 800647c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006480:	4620      	mov	r0, r4
 8006482:	4629      	mov	r1, r5
 8006484:	f7f9 fea4 	bl	80001d0 <__aeabi_dsub>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	ec51 0b19 	vmov	r0, r1, d9
 8006490:	f7fa f980 	bl	8000794 <__aeabi_ddiv>
 8006494:	4632      	mov	r2, r6
 8006496:	4604      	mov	r4, r0
 8006498:	460d      	mov	r5, r1
 800649a:	463b      	mov	r3, r7
 800649c:	4640      	mov	r0, r8
 800649e:	4649      	mov	r1, r9
 80064a0:	f7fa f84e 	bl	8000540 <__aeabi_dmul>
 80064a4:	4632      	mov	r2, r6
 80064a6:	463b      	mov	r3, r7
 80064a8:	f7f9 fe94 	bl	80001d4 <__adddf3>
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4620      	mov	r0, r4
 80064b2:	4629      	mov	r1, r5
 80064b4:	f7f9 fe8c 	bl	80001d0 <__aeabi_dsub>
 80064b8:	4642      	mov	r2, r8
 80064ba:	464b      	mov	r3, r9
 80064bc:	f7f9 fe88 	bl	80001d0 <__aeabi_dsub>
 80064c0:	460b      	mov	r3, r1
 80064c2:	4602      	mov	r2, r0
 80064c4:	493a      	ldr	r1, [pc, #232]	; (80065b0 <__ieee754_pow+0xa30>)
 80064c6:	2000      	movs	r0, #0
 80064c8:	f7f9 fe82 	bl	80001d0 <__aeabi_dsub>
 80064cc:	e9cd 0100 	strd	r0, r1, [sp]
 80064d0:	9b01      	ldr	r3, [sp, #4]
 80064d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80064d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064da:	da2f      	bge.n	800653c <__ieee754_pow+0x9bc>
 80064dc:	4650      	mov	r0, sl
 80064de:	ed9d 0b00 	vldr	d0, [sp]
 80064e2:	f000 f9d1 	bl	8006888 <scalbn>
 80064e6:	ec51 0b10 	vmov	r0, r1, d0
 80064ea:	ec53 2b18 	vmov	r2, r3, d8
 80064ee:	f7ff bbe0 	b.w	8005cb2 <__ieee754_pow+0x132>
 80064f2:	4b30      	ldr	r3, [pc, #192]	; (80065b4 <__ieee754_pow+0xa34>)
 80064f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80064f8:	429e      	cmp	r6, r3
 80064fa:	f77f af0b 	ble.w	8006314 <__ieee754_pow+0x794>
 80064fe:	4b2e      	ldr	r3, [pc, #184]	; (80065b8 <__ieee754_pow+0xa38>)
 8006500:	440b      	add	r3, r1
 8006502:	4303      	orrs	r3, r0
 8006504:	d00b      	beq.n	800651e <__ieee754_pow+0x99e>
 8006506:	a326      	add	r3, pc, #152	; (adr r3, 80065a0 <__ieee754_pow+0xa20>)
 8006508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650c:	ec51 0b18 	vmov	r0, r1, d8
 8006510:	f7fa f816 	bl	8000540 <__aeabi_dmul>
 8006514:	a322      	add	r3, pc, #136	; (adr r3, 80065a0 <__ieee754_pow+0xa20>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f7ff bbca 	b.w	8005cb2 <__ieee754_pow+0x132>
 800651e:	4622      	mov	r2, r4
 8006520:	462b      	mov	r3, r5
 8006522:	f7f9 fe55 	bl	80001d0 <__aeabi_dsub>
 8006526:	4642      	mov	r2, r8
 8006528:	464b      	mov	r3, r9
 800652a:	f7fa fa8f 	bl	8000a4c <__aeabi_dcmpge>
 800652e:	2800      	cmp	r0, #0
 8006530:	f43f aef0 	beq.w	8006314 <__ieee754_pow+0x794>
 8006534:	e7e7      	b.n	8006506 <__ieee754_pow+0x986>
 8006536:	f04f 0a00 	mov.w	sl, #0
 800653a:	e717      	b.n	800636c <__ieee754_pow+0x7ec>
 800653c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006540:	4619      	mov	r1, r3
 8006542:	e7d2      	b.n	80064ea <__ieee754_pow+0x96a>
 8006544:	491a      	ldr	r1, [pc, #104]	; (80065b0 <__ieee754_pow+0xa30>)
 8006546:	2000      	movs	r0, #0
 8006548:	f7ff bb9e 	b.w	8005c88 <__ieee754_pow+0x108>
 800654c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006550:	f7ff bb9a 	b.w	8005c88 <__ieee754_pow+0x108>
 8006554:	9000      	str	r0, [sp, #0]
 8006556:	f7ff bb76 	b.w	8005c46 <__ieee754_pow+0xc6>
 800655a:	2100      	movs	r1, #0
 800655c:	f7ff bb60 	b.w	8005c20 <__ieee754_pow+0xa0>
 8006560:	00000000 	.word	0x00000000
 8006564:	3fe62e43 	.word	0x3fe62e43
 8006568:	fefa39ef 	.word	0xfefa39ef
 800656c:	3fe62e42 	.word	0x3fe62e42
 8006570:	0ca86c39 	.word	0x0ca86c39
 8006574:	be205c61 	.word	0xbe205c61
 8006578:	72bea4d0 	.word	0x72bea4d0
 800657c:	3e663769 	.word	0x3e663769
 8006580:	c5d26bf1 	.word	0xc5d26bf1
 8006584:	3ebbbd41 	.word	0x3ebbbd41
 8006588:	af25de2c 	.word	0xaf25de2c
 800658c:	3f11566a 	.word	0x3f11566a
 8006590:	16bebd93 	.word	0x16bebd93
 8006594:	3f66c16c 	.word	0x3f66c16c
 8006598:	5555553e 	.word	0x5555553e
 800659c:	3fc55555 	.word	0x3fc55555
 80065a0:	c2f8f359 	.word	0xc2f8f359
 80065a4:	01a56e1f 	.word	0x01a56e1f
 80065a8:	3fe00000 	.word	0x3fe00000
 80065ac:	000fffff 	.word	0x000fffff
 80065b0:	3ff00000 	.word	0x3ff00000
 80065b4:	4090cbff 	.word	0x4090cbff
 80065b8:	3f6f3400 	.word	0x3f6f3400
 80065bc:	652b82fe 	.word	0x652b82fe
 80065c0:	3c971547 	.word	0x3c971547

080065c4 <__ieee754_sqrt>:
 80065c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c8:	ec55 4b10 	vmov	r4, r5, d0
 80065cc:	4e56      	ldr	r6, [pc, #344]	; (8006728 <__ieee754_sqrt+0x164>)
 80065ce:	43ae      	bics	r6, r5
 80065d0:	ee10 0a10 	vmov	r0, s0
 80065d4:	ee10 3a10 	vmov	r3, s0
 80065d8:	4629      	mov	r1, r5
 80065da:	462a      	mov	r2, r5
 80065dc:	d110      	bne.n	8006600 <__ieee754_sqrt+0x3c>
 80065de:	ee10 2a10 	vmov	r2, s0
 80065e2:	462b      	mov	r3, r5
 80065e4:	f7f9 ffac 	bl	8000540 <__aeabi_dmul>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4620      	mov	r0, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	f7f9 fdf0 	bl	80001d4 <__adddf3>
 80065f4:	4604      	mov	r4, r0
 80065f6:	460d      	mov	r5, r1
 80065f8:	ec45 4b10 	vmov	d0, r4, r5
 80065fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006600:	2d00      	cmp	r5, #0
 8006602:	dc10      	bgt.n	8006626 <__ieee754_sqrt+0x62>
 8006604:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006608:	4330      	orrs	r0, r6
 800660a:	d0f5      	beq.n	80065f8 <__ieee754_sqrt+0x34>
 800660c:	b15d      	cbz	r5, 8006626 <__ieee754_sqrt+0x62>
 800660e:	ee10 2a10 	vmov	r2, s0
 8006612:	462b      	mov	r3, r5
 8006614:	ee10 0a10 	vmov	r0, s0
 8006618:	f7f9 fdda 	bl	80001d0 <__aeabi_dsub>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	f7fa f8b8 	bl	8000794 <__aeabi_ddiv>
 8006624:	e7e6      	b.n	80065f4 <__ieee754_sqrt+0x30>
 8006626:	1509      	asrs	r1, r1, #20
 8006628:	d076      	beq.n	8006718 <__ieee754_sqrt+0x154>
 800662a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800662e:	07ce      	lsls	r6, r1, #31
 8006630:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8006634:	bf5e      	ittt	pl
 8006636:	0fda      	lsrpl	r2, r3, #31
 8006638:	005b      	lslpl	r3, r3, #1
 800663a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800663e:	0fda      	lsrs	r2, r3, #31
 8006640:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8006644:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006648:	2000      	movs	r0, #0
 800664a:	106d      	asrs	r5, r5, #1
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	f04f 0e16 	mov.w	lr, #22
 8006652:	4684      	mov	ip, r0
 8006654:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006658:	eb0c 0401 	add.w	r4, ip, r1
 800665c:	4294      	cmp	r4, r2
 800665e:	bfde      	ittt	le
 8006660:	1b12      	suble	r2, r2, r4
 8006662:	eb04 0c01 	addle.w	ip, r4, r1
 8006666:	1840      	addle	r0, r0, r1
 8006668:	0052      	lsls	r2, r2, #1
 800666a:	f1be 0e01 	subs.w	lr, lr, #1
 800666e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006672:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800667a:	d1ed      	bne.n	8006658 <__ieee754_sqrt+0x94>
 800667c:	4671      	mov	r1, lr
 800667e:	2720      	movs	r7, #32
 8006680:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006684:	4562      	cmp	r2, ip
 8006686:	eb04 060e 	add.w	r6, r4, lr
 800668a:	dc02      	bgt.n	8006692 <__ieee754_sqrt+0xce>
 800668c:	d113      	bne.n	80066b6 <__ieee754_sqrt+0xf2>
 800668e:	429e      	cmp	r6, r3
 8006690:	d811      	bhi.n	80066b6 <__ieee754_sqrt+0xf2>
 8006692:	2e00      	cmp	r6, #0
 8006694:	eb06 0e04 	add.w	lr, r6, r4
 8006698:	da43      	bge.n	8006722 <__ieee754_sqrt+0x15e>
 800669a:	f1be 0f00 	cmp.w	lr, #0
 800669e:	db40      	blt.n	8006722 <__ieee754_sqrt+0x15e>
 80066a0:	f10c 0801 	add.w	r8, ip, #1
 80066a4:	eba2 020c 	sub.w	r2, r2, ip
 80066a8:	429e      	cmp	r6, r3
 80066aa:	bf88      	it	hi
 80066ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	4421      	add	r1, r4
 80066b4:	46c4      	mov	ip, r8
 80066b6:	0052      	lsls	r2, r2, #1
 80066b8:	3f01      	subs	r7, #1
 80066ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80066be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80066c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80066c6:	d1dd      	bne.n	8006684 <__ieee754_sqrt+0xc0>
 80066c8:	4313      	orrs	r3, r2
 80066ca:	d006      	beq.n	80066da <__ieee754_sqrt+0x116>
 80066cc:	1c4c      	adds	r4, r1, #1
 80066ce:	bf13      	iteet	ne
 80066d0:	3101      	addne	r1, #1
 80066d2:	3001      	addeq	r0, #1
 80066d4:	4639      	moveq	r1, r7
 80066d6:	f021 0101 	bicne.w	r1, r1, #1
 80066da:	1043      	asrs	r3, r0, #1
 80066dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80066e0:	0849      	lsrs	r1, r1, #1
 80066e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80066e6:	07c2      	lsls	r2, r0, #31
 80066e8:	bf48      	it	mi
 80066ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80066ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80066f2:	460c      	mov	r4, r1
 80066f4:	463d      	mov	r5, r7
 80066f6:	e77f      	b.n	80065f8 <__ieee754_sqrt+0x34>
 80066f8:	0ada      	lsrs	r2, r3, #11
 80066fa:	3815      	subs	r0, #21
 80066fc:	055b      	lsls	r3, r3, #21
 80066fe:	2a00      	cmp	r2, #0
 8006700:	d0fa      	beq.n	80066f8 <__ieee754_sqrt+0x134>
 8006702:	02d7      	lsls	r7, r2, #11
 8006704:	d50a      	bpl.n	800671c <__ieee754_sqrt+0x158>
 8006706:	f1c1 0420 	rsb	r4, r1, #32
 800670a:	fa23 f404 	lsr.w	r4, r3, r4
 800670e:	1e4d      	subs	r5, r1, #1
 8006710:	408b      	lsls	r3, r1
 8006712:	4322      	orrs	r2, r4
 8006714:	1b41      	subs	r1, r0, r5
 8006716:	e788      	b.n	800662a <__ieee754_sqrt+0x66>
 8006718:	4608      	mov	r0, r1
 800671a:	e7f0      	b.n	80066fe <__ieee754_sqrt+0x13a>
 800671c:	0052      	lsls	r2, r2, #1
 800671e:	3101      	adds	r1, #1
 8006720:	e7ef      	b.n	8006702 <__ieee754_sqrt+0x13e>
 8006722:	46e0      	mov	r8, ip
 8006724:	e7be      	b.n	80066a4 <__ieee754_sqrt+0xe0>
 8006726:	bf00      	nop
 8006728:	7ff00000 	.word	0x7ff00000

0800672c <__ieee754_sqrtf>:
 800672c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006730:	4770      	bx	lr

08006732 <fabs>:
 8006732:	ec51 0b10 	vmov	r0, r1, d0
 8006736:	ee10 2a10 	vmov	r2, s0
 800673a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800673e:	ec43 2b10 	vmov	d0, r2, r3
 8006742:	4770      	bx	lr

08006744 <finite>:
 8006744:	b082      	sub	sp, #8
 8006746:	ed8d 0b00 	vstr	d0, [sp]
 800674a:	9801      	ldr	r0, [sp, #4]
 800674c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006750:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006754:	0fc0      	lsrs	r0, r0, #31
 8006756:	b002      	add	sp, #8
 8006758:	4770      	bx	lr
 800675a:	0000      	movs	r0, r0
 800675c:	0000      	movs	r0, r0
	...

08006760 <nan>:
 8006760:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006768 <nan+0x8>
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	00000000 	.word	0x00000000
 800676c:	7ff80000 	.word	0x7ff80000

08006770 <rint>:
 8006770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006772:	ec51 0b10 	vmov	r0, r1, d0
 8006776:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800677a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800677e:	2e13      	cmp	r6, #19
 8006780:	ee10 4a10 	vmov	r4, s0
 8006784:	460b      	mov	r3, r1
 8006786:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800678a:	dc58      	bgt.n	800683e <rint+0xce>
 800678c:	2e00      	cmp	r6, #0
 800678e:	da2b      	bge.n	80067e8 <rint+0x78>
 8006790:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006794:	4302      	orrs	r2, r0
 8006796:	d023      	beq.n	80067e0 <rint+0x70>
 8006798:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800679c:	4302      	orrs	r2, r0
 800679e:	4254      	negs	r4, r2
 80067a0:	4314      	orrs	r4, r2
 80067a2:	0c4b      	lsrs	r3, r1, #17
 80067a4:	0b24      	lsrs	r4, r4, #12
 80067a6:	045b      	lsls	r3, r3, #17
 80067a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80067ac:	ea44 0103 	orr.w	r1, r4, r3
 80067b0:	4b32      	ldr	r3, [pc, #200]	; (800687c <rint+0x10c>)
 80067b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80067b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4630      	mov	r0, r6
 80067c0:	4639      	mov	r1, r7
 80067c2:	f7f9 fd07 	bl	80001d4 <__adddf3>
 80067c6:	e9cd 0100 	strd	r0, r1, [sp]
 80067ca:	463b      	mov	r3, r7
 80067cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067d0:	4632      	mov	r2, r6
 80067d2:	f7f9 fcfd 	bl	80001d0 <__aeabi_dsub>
 80067d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80067da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80067de:	4639      	mov	r1, r7
 80067e0:	ec41 0b10 	vmov	d0, r0, r1
 80067e4:	b003      	add	sp, #12
 80067e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e8:	4a25      	ldr	r2, [pc, #148]	; (8006880 <rint+0x110>)
 80067ea:	4132      	asrs	r2, r6
 80067ec:	ea01 0702 	and.w	r7, r1, r2
 80067f0:	4307      	orrs	r7, r0
 80067f2:	d0f5      	beq.n	80067e0 <rint+0x70>
 80067f4:	0851      	lsrs	r1, r2, #1
 80067f6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80067fa:	4314      	orrs	r4, r2
 80067fc:	d00c      	beq.n	8006818 <rint+0xa8>
 80067fe:	ea23 0201 	bic.w	r2, r3, r1
 8006802:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006806:	2e13      	cmp	r6, #19
 8006808:	fa43 f606 	asr.w	r6, r3, r6
 800680c:	bf0c      	ite	eq
 800680e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006812:	2400      	movne	r4, #0
 8006814:	ea42 0306 	orr.w	r3, r2, r6
 8006818:	4918      	ldr	r1, [pc, #96]	; (800687c <rint+0x10c>)
 800681a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800681e:	4622      	mov	r2, r4
 8006820:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006824:	4620      	mov	r0, r4
 8006826:	4629      	mov	r1, r5
 8006828:	f7f9 fcd4 	bl	80001d4 <__adddf3>
 800682c:	e9cd 0100 	strd	r0, r1, [sp]
 8006830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006834:	4622      	mov	r2, r4
 8006836:	462b      	mov	r3, r5
 8006838:	f7f9 fcca 	bl	80001d0 <__aeabi_dsub>
 800683c:	e7d0      	b.n	80067e0 <rint+0x70>
 800683e:	2e33      	cmp	r6, #51	; 0x33
 8006840:	dd07      	ble.n	8006852 <rint+0xe2>
 8006842:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006846:	d1cb      	bne.n	80067e0 <rint+0x70>
 8006848:	ee10 2a10 	vmov	r2, s0
 800684c:	f7f9 fcc2 	bl	80001d4 <__adddf3>
 8006850:	e7c6      	b.n	80067e0 <rint+0x70>
 8006852:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006856:	f04f 36ff 	mov.w	r6, #4294967295
 800685a:	40d6      	lsrs	r6, r2
 800685c:	4230      	tst	r0, r6
 800685e:	d0bf      	beq.n	80067e0 <rint+0x70>
 8006860:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8006864:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006868:	bf1f      	itttt	ne
 800686a:	ea24 0101 	bicne.w	r1, r4, r1
 800686e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006872:	fa44 f202 	asrne.w	r2, r4, r2
 8006876:	ea41 0402 	orrne.w	r4, r1, r2
 800687a:	e7cd      	b.n	8006818 <rint+0xa8>
 800687c:	08006a08 	.word	0x08006a08
 8006880:	000fffff 	.word	0x000fffff
 8006884:	00000000 	.word	0x00000000

08006888 <scalbn>:
 8006888:	b570      	push	{r4, r5, r6, lr}
 800688a:	ec55 4b10 	vmov	r4, r5, d0
 800688e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006892:	4606      	mov	r6, r0
 8006894:	462b      	mov	r3, r5
 8006896:	b99a      	cbnz	r2, 80068c0 <scalbn+0x38>
 8006898:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800689c:	4323      	orrs	r3, r4
 800689e:	d036      	beq.n	800690e <scalbn+0x86>
 80068a0:	4b39      	ldr	r3, [pc, #228]	; (8006988 <scalbn+0x100>)
 80068a2:	4629      	mov	r1, r5
 80068a4:	ee10 0a10 	vmov	r0, s0
 80068a8:	2200      	movs	r2, #0
 80068aa:	f7f9 fe49 	bl	8000540 <__aeabi_dmul>
 80068ae:	4b37      	ldr	r3, [pc, #220]	; (800698c <scalbn+0x104>)
 80068b0:	429e      	cmp	r6, r3
 80068b2:	4604      	mov	r4, r0
 80068b4:	460d      	mov	r5, r1
 80068b6:	da10      	bge.n	80068da <scalbn+0x52>
 80068b8:	a32b      	add	r3, pc, #172	; (adr r3, 8006968 <scalbn+0xe0>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	e03a      	b.n	8006936 <scalbn+0xae>
 80068c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80068c4:	428a      	cmp	r2, r1
 80068c6:	d10c      	bne.n	80068e2 <scalbn+0x5a>
 80068c8:	ee10 2a10 	vmov	r2, s0
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f7f9 fc80 	bl	80001d4 <__adddf3>
 80068d4:	4604      	mov	r4, r0
 80068d6:	460d      	mov	r5, r1
 80068d8:	e019      	b.n	800690e <scalbn+0x86>
 80068da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80068de:	460b      	mov	r3, r1
 80068e0:	3a36      	subs	r2, #54	; 0x36
 80068e2:	4432      	add	r2, r6
 80068e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80068e8:	428a      	cmp	r2, r1
 80068ea:	dd08      	ble.n	80068fe <scalbn+0x76>
 80068ec:	2d00      	cmp	r5, #0
 80068ee:	a120      	add	r1, pc, #128	; (adr r1, 8006970 <scalbn+0xe8>)
 80068f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068f4:	da1c      	bge.n	8006930 <scalbn+0xa8>
 80068f6:	a120      	add	r1, pc, #128	; (adr r1, 8006978 <scalbn+0xf0>)
 80068f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068fc:	e018      	b.n	8006930 <scalbn+0xa8>
 80068fe:	2a00      	cmp	r2, #0
 8006900:	dd08      	ble.n	8006914 <scalbn+0x8c>
 8006902:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006906:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800690a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800690e:	ec45 4b10 	vmov	d0, r4, r5
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006918:	da19      	bge.n	800694e <scalbn+0xc6>
 800691a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800691e:	429e      	cmp	r6, r3
 8006920:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006924:	dd0a      	ble.n	800693c <scalbn+0xb4>
 8006926:	a112      	add	r1, pc, #72	; (adr r1, 8006970 <scalbn+0xe8>)
 8006928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e2      	bne.n	80068f6 <scalbn+0x6e>
 8006930:	a30f      	add	r3, pc, #60	; (adr r3, 8006970 <scalbn+0xe8>)
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f7f9 fe03 	bl	8000540 <__aeabi_dmul>
 800693a:	e7cb      	b.n	80068d4 <scalbn+0x4c>
 800693c:	a10a      	add	r1, pc, #40	; (adr r1, 8006968 <scalbn+0xe0>)
 800693e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0b8      	beq.n	80068b8 <scalbn+0x30>
 8006946:	a10e      	add	r1, pc, #56	; (adr r1, 8006980 <scalbn+0xf8>)
 8006948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800694c:	e7b4      	b.n	80068b8 <scalbn+0x30>
 800694e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006952:	3236      	adds	r2, #54	; 0x36
 8006954:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006958:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800695c:	4620      	mov	r0, r4
 800695e:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <scalbn+0x108>)
 8006960:	2200      	movs	r2, #0
 8006962:	e7e8      	b.n	8006936 <scalbn+0xae>
 8006964:	f3af 8000 	nop.w
 8006968:	c2f8f359 	.word	0xc2f8f359
 800696c:	01a56e1f 	.word	0x01a56e1f
 8006970:	8800759c 	.word	0x8800759c
 8006974:	7e37e43c 	.word	0x7e37e43c
 8006978:	8800759c 	.word	0x8800759c
 800697c:	fe37e43c 	.word	0xfe37e43c
 8006980:	c2f8f359 	.word	0xc2f8f359
 8006984:	81a56e1f 	.word	0x81a56e1f
 8006988:	43500000 	.word	0x43500000
 800698c:	ffff3cb0 	.word	0xffff3cb0
 8006990:	3c900000 	.word	0x3c900000

08006994 <_init>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr

080069a0 <_fini>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	bf00      	nop
 80069a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a6:	bc08      	pop	{r3}
 80069a8:	469e      	mov	lr, r3
 80069aa:	4770      	bx	lr
